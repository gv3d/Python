###################### СЕПАРАТОР sep ТА end:
print('a', 'b', 'c', sep='#')
print('d', 'e', 'f', sep='^')
print('a', 'b', 'c', end='@')
print('a', 'b', sep=' ')   # пробел
print('b', 'a', end='\n')  # перевод строки(обзац)
######################
name1 = input("Введите ваше имя: ")
name2 = input("Введите вашу фамилию: ")
name3 = input("Введите ваше отчество: ")
print(name2, name1, name3,"- это ваше полное имя! Юху!")
name4 = input("Теперь напишите ваш адресс: ")
print(name2,"итак, вы",name1,name3,", проживаете по адресу",name4,"Юху!!!")
######################
a = int(input('введи число і я перемножу його на 3: '))
print(a *3)
######################
a = int(input('введи перше число: '))
b = int(input('введи друге число: '))
print('їх сума = ', a + b)
print('їх відняти = ', a - b)
print('якщо їх перемножити = ', a * b)
print('їх поділити = ', a / b)
print('перше число в сепені другого числа = ', a ** b)
######################
x = int(input())
print(x // 60)
print(x % 60)
######################
x = int(input())
h = int(input())
m = int(input())
print((x + h * 60 + m) // 60)
print((x + h * 60 + m) % 60)
###### або ще ось такий розв'язок:
x = int(input()) + 60 * int(input()) + int(input())
print(x // 60)
print(x % 60)
###### ось найкоротший розв'язок у два рядки:
X = int(input()) + int(input()) * 60 + int(input())
print (X // 60, "\n", X % 60)
######################

# Обчислення факторіалу_метод РЕКУРСІЇ (!ТІЛЬКИ до чисел <1000)

number = int(input("Ввведіть число, для обчислення факторіалу: "))
def factorial(n):
    if n == 0:
        return 1
    return factorial(n-1) * n
print("Факторіал числа {n} = {f}".format(n = number, f = factorial(number)))

# Обчислення факторіалу_метод ЦИКЛІВ

number = int(input("Веедіть число, для обчислення факторіалу: "))

def factorial(n):
    if n == 0:
        return  1
    f = 1
    i = 0

    while i < n:
        i += 1
        f = f * i

    return f
print("Факторіал числа {n} = {f}".format(n = number, f = factorial(number)))

######################

# числа Фібоначчі_метод ЦИКЛІВ

f1 = f2 = int(input("З якого числа починати: "))
n = int(input("Скільки всього чисел буде в ряду: "))
print(f1, end=' ')
print(f2, end=' ')
for i in range(2, n):
    f1, f2 = f2, f1 + f2 # це сума двох попередніх чисел
    print(f2, end=' ')

# числа Фібоначчі_в два стовбчики

n1 = int(input("З якого числа буде починатись ряд: "))
n2 = int(input("Введіть кількість чисел у ряду: "))
def fib():
    f1, f2 = 0, 1

    while True:
        yield f1
        f1, f2 = f2, f1 + f2

for i, f in zip(range(n1+n2), fib()):
        print("{i:3}: {f:3}".format(i=i, f=f))


# ПОСЛІДОВНІСТЬ ФІБОНАЧЧІ:
# Напишите программу, которая считывает натуральное число n и выводит первые n чисел последовательности Фибоначчи.
f1, f2 = 0, 1
print(f2, end=' ')      # перша одиничка
n = int(input())
for i in range(1, n):
    if n > 1:       # якщо n = 1, то виведе тільки першу одиничку
        f1, f2 = f2, f2 + f1 # треба щоб значення f1 i f2 змінювались одночасно, тому робимо через одне '=' !
        print(f2, end=' ')

# більш компактний розв'язок:
a, b = 1, 1
for i in range(int(input())):
    print(a, end=' ')
    a, b = b, a + b

# ЧИСЛО Фибоначчи
# Последовательность Фибоначчи определяется так:
# φ0=0,  φ1=1, ..., φn=φn-1+φn-2.
# По данному числу n определите n-е число Фибоначчи φn.
# 6 >> 8
a, b = 0, 1
for i in range(int(input())):
    a, b = b, a + b
print(a)

######################

# Однозв'язний список

class Node:
    # ячейка списка
    def __init__(self, value = None, next = None):
        self.value = value
        self.next = next

class LinkedList:
    # однозв'язний список
    def __init__(self):
        self.head = None
        self.tail = None
        self.lenght = 0

    def __str__(self):
        if self.head != None:
            c = self.head
            out = "LinkedList [" +str(c.value)

            while c.next != None:
                c = c.next
                out += ", " + str(c.value)

            out += "]"
            return out
        else:
            return "LinkedList []"

    def add(self, n):
        self.lenght += 1

        if self.head == None:
          self.head = self.tail = Node(n, None)
        else:
            self.tail.next = self.tail = Node(n, None)

    def revers(self):
        #розгортання однозв'язного списку
        pNode = None
        cNode = self.head
        nNode = cNode.next

        self.tail = cNode

        while nNode != None:
            cNode.next = pNode
            pNode = cNode
            cNode = nNode
            nNode = cNode.next

            cNode.next = pNode
            self.head = cNode

L = LinkedList()

L.add(1)
L.add(2)
L.add(3)
L.revers()
print(L)


# Відстань Левенштейна (або редакційна відстань)

# рахуємо скільки дій нам знадобиться для редагуваня одного рядка, щоб він був ідетничним іншому рядку, символ можемо тільки:
# 1) видаляти
# 2) замінювати
# 3) додвати
# (ВЛ можна використовувати, щоб порівняти два списки: один - з вірними даними, другий - з помилками)

str1 = "Здоровенькі були!"
str2 = "Зоробені булки"

def dist(a, b):
    def rec(i, j):
        if i == 0 or j == 0: # - якщо рядок пустий то відстань Левенштейна = її довжині (стільки ж знаків, щоб іі написати заново)
            return max(i, j)
        elif a[i-1] == b[j-1]: # - якщо останні символи однакові, то просто їх "з'їдаємо"
            return rec(i-1, j-1)
        else: # - в іншому ж випадку обчислюємо мінімальний варіант
            return 1 + min(
                rec(i, j-1),
                rec(i-1, j),
                rec(i-1, j-1),
            )
    return rec(len(a), len(b))

# str1 = "Здоровенькі були!"
# str2 = "І вам не хварать!"

lev = dist(str1, str2)
bigger = max([len(str1), len(str2)])
pct = ((bigger - lev) / bigger) * 100

print(
    "Рядок №1 : {str1}\nРядок #2 : {str2}\n===\nЗбігаються на : {pct}%".format(str1=str1,str2=str2,pct=pct)
)

def distance(a, b):
    "Calculates the Levenshtein distance between a and b."
    n, m = len(a), len(b)
    if n > m:
        # Make sure n <= m, to use O(min(n, m)) space
        a, b = b, a
        n, m = m, n

    current_row = range(n + 1)  # Keep current and previous row, not entire matrix
    for i in range(1, m + 1):
        previous_row, current_row = current_row, [i] + [0] * n
        for j in range(1, n + 1):
            add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
            if a[j - 1] != b[i - 1]:
                change += 1
            current_row[j] = min(add, delete, change)

    return current_row[n]

######################

a = int(input("Введіть будь яке число а і ми визначимо чи воно дійсно більше нуля: "))
print("Відповідь для числа a: ", a > 0)

# Напишите программу, которая сначала считывает две фразы по очереди,
# а потом воспроизводит их в той же последовательности, каждую на отдельной строчке.
a, b = (input() for _ in range(2))
print(a, b, sep='\n')


######################

x = 5
y = 10
print(y > x * x or y >= 2 * x and x < y)

# У Олега в банке есть n евро.
# Он хочет снять всю сумму наличными. Номиналы еврокупюр равны 1, 5, 10, 20, 100.
# Какое минимальное число купюр должен получить Олег после того, как снимет все деньги?
# На вход программе поступает одно положительные целое число n.
n = int(input())
print(n // 100 + n % 100 // 20 + n % 20 // 10 + n % 10 // 5 + n % 5 // 1)

# Дано целое число n. Выведите следующее за ним четное число.
# Задачу необходимо решить целочисленными операциями без использования условных операторов и\или циклов.
n = int(input())
print(n + 1 + (n-1) % 2)

# Электронные часы показывают время в формате h:mm:ss,
# то есть сначала записывается количество часов, потом обязательно двузначное количество минут,
# затем обязательно двузначное количество секунд.
# Количество минут и секунд при необходимости дополняются до двузначного числа нулями.
# С начала суток прошло n секунд. Выведите, что покажут часы.
n = int(input())
h = n // 3600 % 24  # % 24 - якщо більше доби, то дає залишок
m = n % 3600 // 60
s = n % 3600 % 60
print('{}:{:02}:{:02}'.format(h, m, s))
# або через .rjust():
print(h, str(m).rjust(2, '0'), str(s).rjust(2, '0'), sep=':')


# Дано число n. С начала суток прошло n минут.
# Определите, сколько часов и минут будут показывать электронные часы в этот момент.
# Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут (от 0 до 59).
# Учтите, что число n может быть больше, чем количество минут в сутках.
n = int(input())
print(n // 60 % 24, n % 60)  # % 24 - якщо більше 24, то дає залишок

# Электронные часы показывают время в формате h:mm:ss,
# то есть сначала записывается количество часов в диапазоне от 0 до 23, потом обязательно двузначное количество минут,
# затем обязательно двузначное количество секунд.
# Количество минут и секунд при необходимости дополняются до двузначного числа нулями.
# Программа получает на вход число n - количество секунд, которое прошло с начала суток.
# Выведите показания часов, соблюдая формат.
# 5000
# >> 1:23:20
n = int(input())
h = n // 3600
m = n % 3600 // 60
s = n % 3600 % 60
print('{}:{:02}:{:02}'.format(h, m, s))
# або:
print(h, str(m).rjust(2, '0'), str(s).rjust(2, '0'), sep=':')

# Часовая стрелка
# Часовая стрелка повернулась с начала суток на d градусов. Определите, сколько сейчас целых часов h и целых минут m.
# На вход программе подается целое число d (0 ≤ d < 360).
# Выведите на экран фразу:
# It is ... hours ... minutes.
# Вместо многоточий программа должна выводить значения h и m, отделяя их от слов ровно одним пробелом.
n = int(input())
print('It is', n // 30, 'hours', 10 * (n % 30) // 5, 'minutes.')

# На вход поступает целое число.
# Программа должна вывести True, если введенное значение является четным числом, в противном случае - False.
print(int(input()) % 2 == 0)
# або:
print(not int(input()) % 2)

# На вход поступают два целых число.
# Программа должна вывести True, если оба числа делятся на 7, в противном случае - False.
a, b = map(int, input().split())
print(a % 7 == 0 and b % 7 == 0)

# На вход поступает целое положительное число.
# Программа должна вывести True, если данное число является двузначным, в противном случае - False.
print(len(input()) == 2) # вар 1
print(10 <= int(input()) <= 99) # вар 2

#######################################################################################################################
#######################################################################################################################
################################################## IF   ELIF    ELSE ##################################################
#######################################################################################################################
#######################################################################################################################
a = int(input("Спробуйте ввести значення числа a, яке менше 10: a="))
if a < 10:
    print("a менше десяти! Ви все ввели правильно!")
else:
    print("a більше десяти! Ви шо робите?? Вас просили менше 10 ввести!!")

######################

a = int(input("Напишіть число, 'а' і я визначу чи воно парне, а = "))
if a % 2 == 0 :
    print('число', a, '- парне!')
else:
    print('число', a, '- не парне!')

######################

a = int(input())
if a == 1: # якщо вираз "a == 1" правильний True, то виконується блок "print("a = 1")"
    print("a = 1")
elif 1 < a < 3: # якщо ж правильний вираз - "1 < a < 3", то виконується блок "print("a = 2")"
    print("a = 2")
else: # якщо обидва вирази не правильні, то виконується блок "print("a = 3")"
    print("a = 3")


# Координатные четверти
# Даны координаты двух точек на плоскости, требуется определить, лежат ли они в одной координатной четверти
# или нет (все координаты отличны от нуля).
# Вводятся 4 числа: координаты первой точки (x1, y1) и координаты второй точки (x2, y2).
# Программа должна вывести слово YES, если точки находятся в одной координатной четверти,
# в противном случае вывести слово NO.
x1, y1, x2, y2 = (int(input()) for i in range(4))
if x1 >= 0 <= x2 and y1 >= 0 <= y2 or x1 <= 0 >= x2 and y1 <= 0 >= y2 or x1 >= 0 <= x2 and y1 <= 0 >= y2 or x1 <= 0 >= x2 and y1 >= 0 <= y2:
    print('YES')
else:
    print('NO')

# більш компактний варіант розв'язку:
x1, y1, x2, y2 = [int(input()) for _ in range(4)]
print("YES" if (x1 / x2 > 0 and y1 / y2 > 0) else "NO")

# Мороженое
# В кафе мороженое продают по три шарика и по пять шариков. Можно ли купить ровно k шариков мороженого?
# Программа должна вывести слово YES, если при таких условиях можно набрать ровно k шариков (не больше и не меньше),
# в противном случае - вывести NO.
k = int(input())
if k in [1, 2, 4, 7]:
    print('NO')
else:
    print('YES')

# Программа получает на вход три натуральных числа A, B и C через пробел.
# Вам необходимо вывести "YES" в том случае, если A + B = C и вывести NO в противном случае.
a, b, c = map(int, input().split())
print('YES' if a + b == c else 'NO')

##################### IF IF IF IF
print("Знайдемо найбільше з п'яти чисел.")
x1 = int(input("Введіть перше число: "))
x2 = int(input("Введіть друге число: "))
x3 = int(input("Введіть третє число: "))
x4 = int(input("Введіть четверте число: "))
x5 = int(input("Введіть п'яте число: "))
m = x1
if x2 > m:
    m = x2
if x3 > m:
    m = x3
if x4 > m:
    m = x4
if x5 > m:
    m = x5
print(m, "- осьо найбільше введене число")

###################### ДІЛЕННЯ НА НУЛЬ
print("Поділимо одне число на інше")
a = int(input("Введіть ділене: "))
b = int(input("Введіть дільник: "))
if b != 0:
    print("Відповідь:", a, "/", b, "=", a/b)
else:
    print("- на нуль ділити НЕ МОЖНА!!! ВИ ШО!!!")
    b = int(input("Ще раз введіть дільник (!не нульове число!): "))
    if b == 0:
        print("ТИ ДУРКО ЧИ ШО????????")
    else:
        print(a / b)

###################### ПЕРЕСИП і НЕДОСИП
A = int(input("Рекомендовано спати не менше: "))
B = int(input("Рекомендовано спати не більше: "))
H = int(input("Скільки годин спите ви: "))

if A <= H <= B:
    print(H, "годин це - Це норма!")
elif H < A:
    print(H, "годин це - Недосип!")
else:
    print(H, "годин це - Пересип!")

# інший варіант розв'язку:
a = int(input())
b = int(input())
h = int(input())

if h < a:
    print('Недосып')
elif h > b:
    print('Пересып')
else:
    print('Это нормально')

# ще один варіант розв'язку:
a, b, c = int(input()), int(input()), int(input())
print(("Недосып", "Это нормально", "Пересып")[(x > b) - (x < a) + 1])

###################### ВИСОКОСНИЙ РІК:
a = int(input("Введіть рік: "))

if a % 4 == 0 and a % 100 != 0 or a % 400 == 0:
    print("Це високосний рік")
else:
    print("Це звичайний рік")

# більш компактний варіант розв'язку:
a = int(input("Введіть рік: "))
print("Це звичайний рік" if a % 4 == 0 and a % 100 != 0 or a % 400 == 0 else "Це високосний рік")

###################### КІЛЬКІСТЬ ЛІТЕР (len) та АБЗАЦ (\n):
a = (input("введіть слово, щоб порахувати парність/непарність літер в ньому: "))
if len(a) % 2 == 0:  # рахує кількість літер в рядку "а"
    print("кількість літер в слові -", len(a), 'шт.', "\nце - парна кількість")
else:
    print("кількість літер в слові -", len(a), 'шт.', "\nі це - не парна кількість")

###################### ФОРМУЛА ГЕРОНА:
print("Визначеня площі трикутника за допомогою формули Герона")
a = int(input("введіть першу сторону трикутника:\n"))
b = int(input("введіть другу сторону :\n"))
c = int(input("введіть третю сторону :\n"))
p = (a + b + c)/2
print("Площа трикутника:", '\n', (p * (p - a) * (p - b) * (p - c))**0.5)

# більш компактний варіант розв'язку:
a, b, c = [int(input()) for i in range(3)]  # в діапазоні 3
print((((a+b+c)/2)*((b+c-a)/2)*((a-b+c)/2)*((a+b-c)/2))**0.5)

###################### отримання True False, коли а в діапазонах чисел
a = int(input())
print(-15 < a <= 12 or 14 < a < 17 or 19 <= a)

###################### ПЛОЩА ФІГУРИ:
figura = input("Площу якої фігури ви хочете обислити (трикутник, прямокутник чи коло): ")

if figura == 'трикутник':
    a, b, c = int(input()), int(input()), int(input())
    print((((a + b + c) / 2) * (((a + b + c) / 2) - a) * (((a + b + c) / 2) - b) * (((a + b + c) / 2) - c)) ** 0.5)
elif figura == 'прямокутник':
    a, b = int(input()), int(input())
    print(a * b)
elif figura == 'коло':
    a = int(input())
    print(3.14 * a ** 2)

###################### Напишите программу, которая получает на вход три целых числа,
# по одному числу в строке, и выводит на консоль в три строки сначала максимальное,
# потом минимальное, после чего оставшееся число.
# На ввод могут подаваться и повторяющиеся числа.

a, b, c = int(input()), int(input()), int(input())

max = a
if max >= b and max > c and b > c or max == b == c:
    print(max, c, b)
    print("max = a, c, b")
elif max > b and max >= c and c >= b:
    print(max, b, c)
    print("max = a, b, c")
else:
    max = b
    if max > a and max > c and a > c:
        print(max, c, a)
        print("max = b, c, a")
    elif max > a and max >= c and c >= a:
        print(max, a, c)
        print("max = b, a, c")
    else:
        max = c
        if max > a and max > b and a > b:
            print(max, b, a)
            print("max = c, a, b")
        elif max > a and max >= b and b >= a:
            print(max, a, b)
            print("max = c, a, b")

# більш компактний варіант розв'язку:
a, b, c = int(input()), int(input()), int(input())

if a < b:  # якщо a < b, то міняємо їх значення місцями
	a, b = b, a
if a < c:
	a, c = c, a
if b > c:
	b, c = c, b
print(a)
print(b)
print(c)

# Напишите программу, которая находит среднее по величине число
a, b, c = (int(input()) for _ in range(3))
if c < a:
    a, c = c, a
if b < a:
    a, b = b, a
if c < b:
    b, c = c, b
print(b)

###################### НАЙМЕНШЕ ЧИСЛО:
a, b, c, d = (int(input()) for _ in range(4))
if a > b:
    a = b
if a > c:
    a = c
if a > d:
    a = d
print(a)

###################### ГАРНЕ ЧИСЛО:
# Назовем число красивым, если оно является четырехзначным и делится нацело на 77 или на 1717.
# Напишите программу, определяющую, является ли введённое число красивым.
# Программа должна вывести «YES», если число является красивым, или «NO» в противном случае.
n = int(input())
if len(str(n)) == 4 and (n % 17 == 0 or n % 7 == 0):
    print('YES')
else:
    print('NO')

# більш компактний варіант розв'язку:
s = int(input())
print('YES' if (not s % 7 or not s % 17) and (1000 <= s <= 9999) else 'NO')

#                                            Т О Р Т
# На свой день рождения Петя купил красивый и вкусный торт, который имел идеально круглую форму.
# Петя не знал, сколько гостей придет на его день рождения, поэтому вынужден был разработать алгоритм,
# согласно которому он сможет быстро разрезать торт на N равных частей.
# Следует учесть, что разрезы торта можно производить как по радиусу, так и по диаметру.
# Помогите Пете решить эту задачу, определив наименьшее число разрезов торта по заданному числу гостей.
# Входные данные
# Программа получает на вход натуральное число N – число гостей, включая самого виновника торжества
# Выходные данные
# Выведите минимально возможное число разрезов торта.
n = int(input())
if n % 2 == 0:
    print(int(n / 2))
elif n == 1:
    print(0)
else:
    print(n)

# більш компактний варіант розв'язку:
n = int(input())
print(int(n / 2) if n % 2 == 0 else 0 if n == 1 else n)


# ЗААРПЛАТИ
# В отделе работают 3 сотрудника, которые получают заработную плату в рублях.
# Требуется определить: на сколько зарплата самого высокооплачиваемого из них отличается от самого низкооплачиваемого.
# Входные данные
# Размеры зарплат всех сотрудников вводятся в одну строку через пробел.
# Каждая заработная плата – это натуральное число, не превышающее 105. И гарантируется ,что все зарплаты различны
# Выходные данные
# Необходимо вывести одно целое число — разницу между максимальной и минимальной зарплатой.
s = [int(i) for i in input().split()]
for i in s:
    if s[2] > s[0] < s[1]:
        mini = s[0]
        if s[2] > s[1]:
            maxi = s[2]
        else:
            maxi = s[1]
    elif s[0] > s[1] < s[2]:
        mini = s[1]
        if s[2] > s[0]:
            maxi = s[2]
        else:
            maxi = s[0]
    else:
        mini = s[2]
        if s[0] > s[1]:
            maxi = s[0]
        else:
            maxi = s[1]
print(maxi - mini)

# інший варіант розв'язку:
a, b, c = map(int, input().split())
d = a + b + c
e = 0
for i in a, b, c:
    if d > i:
        d = i
    if e < i:
        e = i
print(e - d)

# більш компактний варіант розв'язку:
a, b, c = sorted([int(i) for i in input().split()])
print(c - a)

# Длина двух строк
# Есть две строки. Петя хочет сравнить эти строки лексикографически.
# При этом регистр букв значения не имеет, то есть большая буква считается эквивалентной
# соответствующей маленькой букве. Помогите Пете выполнить сравнение.
# Длина строк находится в пределах от 1 до 100 включительно.
# Гарантируется, что строки имеют одинаковую длину, а также состоят из больших и маленьких букв латинского алфавита.
a = str(input()).lower()
b = str(input()).lower()
if a > b:
    print("1")
elif a < b:
    print("-1")
else:
    print('0')

# FizzBuzz
# Ваша программа должна считать одно натуральное число, после чего вывести:
# “Fizz”, если это число делится на 3;
# “Buzz”, если это число делится на 5;
# “FizzBuzz”, если выполнены оба предыдущих условия;
# само это число в остальных случаях.
n = int(input())
if n % 3 == 0 and n % 5 == 0:
    print('FizzBuzz')
elif n % 3 == 0:
    print('Fizz')
elif n % 5 == 0:
    print('Buzz')
else:
    print(n)

# більш компактний варіант розв'язку:
n = int(input())
print('Fizz' * (not n % 3) + 'Buzz' * (not n % 5) or str(n))




###################### К А Л Ь К У Л Я Т О Р (ДІЛЕННЯ НА 0):

#  стало вірно ТІЛЬКИ коли дописав " or (b == '0')"!!!
a, b, c = input(), input(), input()

if ((b == '0.0') or (b == '0')) and ((c == '/') or (c == 'div') or (c == 'mod')):
    print("Деление на 0!")
elif c == '+':
    print(float(a) + float(b))
elif c == '-':
    print(float(a) - float(b))
elif c == '*':
    print(float(a) * float(b))
elif c == 'pow':
    print(float(a) ** float(b))
elif (not b == '0.0') and (c == 'div'):
    print(float(a) // float(b))
elif (not b == '0.0') and (c == 'mod'):
    print(float(a) % float(b))
elif (not b == '0.0') and (c == '/'):
    print(float(a) / float(b))

# більш компактний варіант розв'язку:
# (ifы проверяются последовательно, не нужно проверять деление на ноль отдельным if)
a, b, op = float(input()), float(input()), input()
c = None
if b == 0 and (op == '/' or 'div' or 'mod'):
    c = 'Деление на ноль!'
elif op == '+':
    c = (a + b)
elif op == '-':
    c = (a - b)
elif op == '*':
    c = (a * b)
elif op == 'pow':
    c = (a ** b)
elif op == '/':
    c = (a / b)
elif op == 'div':
    c = (a // b)
elif op == 'mod':
    c = (a % b)
print(c)

######################      СУМА ДВОХ ПОЛОВИНОК ОДНОГО ЧИСЛА (a[0]):                                  ЩАСЛИВИЙ БІЛЕТ
a = input()
if int(a[0]) + int(a[1]) + int(a[2]) == int(a[3]) + int(a[4]) + int(a[5]):
    print('Фтіфліфтік!')
    print(int(a[0]) + int(a[1]) + int(a[2]), '=', int(a[3]) + int(a[4]) + int(a[5]))
else:
    print('Не фтіфліфтік!')
    print(int(a[0]) + int(a[1]) + int(a[2]), '!=', int(a[3]) + int(a[4]) + int(a[5]))

# більш компактний варіант розв'язку (без a[0]):
a, b, c, d, e, f = input()
if int(a)+int(b)+int(c) == int(d)+int(e)+int(f):
    print ('Счастливый')
else:
    print ('Обычный')

# Для положительного целого числа n определим функцию f:
# f(n)=-1+2-3+..+(-1)n
# Ваша задача — посчитать f(n) для данного целого числа n.
# В единственной строке записано положительное целое число n (1≤n≤1015).
# Выведите f(n) в единственной строке.
# f(4)=-1+2-3+4=2
# f(5)=-1+2-3+4-5=-3
n = int(input())
if n % 2 == 0:
    print(n // 2)
else:
    print(-n // 2)

# Напишите программу, которая на вход получает координаты двух клеток шахматной доски и выводит сообщение о том,
# являются ли эти клетки одного цвета. Столбцы на шахматной доске обозначаются английскими строчными буквами.
# Программа должна выводить YES, когда клетки одного цвета, NO - разного.
# Гарантируется, что значение колонок это латинские буквы abcdefgh, а строки это символы цифр от 1-8
a = input()
b = input()
if (a[0] in 'aceg' and a[1] in '1357' or a[0] in 'bdfh' and a[1] in '2468') * (b[0] in 'aceg' and b[1] in '1357' or b[0] in 'bdfh' and b[1] in '2468'):
    print('YES')
else:
    print('NO')

# більш компактний варіант розв'язку:
print(('YES', 'NO')[sum(map(ord, input() + input())) % 2])





# В данной задаче необходимо сравнить два целых числа A и B.
# Они поступают на вход программе отдельно в каждой строке.
# Ваша задача вывести символ "<", если A меньше B, ">", если A больше B и "=", если A=B.
a, b = (int(input()) for i in range(2))
if a < b:
    print('<')
elif a > b:
    print('>')
else:
    print('=')

# більш компактний варіант розв'язку:
a, b = int(input()), int(input())
print('>'*(a > b) + '<'*(a < b) + '='*(a == b))

# або:
a, b = int(input()), int(input())
print("=" if a == b else ">" if a > b else "<")

# Даны три целых числа, записанных в отдельных строках. Определите, сколько среди них совпадающих.
# Программа должна вывести одно из чисел:
# 3 (если все совпадают), 2 (если два совпадают) или 0 (если все числа различны).
a, b, c = (int(input()) for _ in range(3))
if a == b == c:
    print(3)
elif a == b != c or a == c != b or b == c != a:
    print(2)
else:
    print(0)


##################### СКІЛЬКИ В ХКИЛИНАХ ГОДИН І ХВИЛИН // % :
m = int(input())#  хвилини
print(m, 'хв - це', (m // 60), 'год.', (m % 60), 'хв.')

##################### ВАГОНИ КУПЕ // :
# В купейном вагоне имеется 9 купе с четырьмя местами для пассажиров в каждом (1-36).
#  Напишите программу, которая определяет номер купе,
#  в котором находится место с заданным номером (нумерация мест сквозная, начинается с 1).
m = int(input())
print((m-1) // 4 + 1)

##################### ВИТЯГТИ ПО ЧИСЛУ // % :
n = 12345678
print(n // 10000000 % 10)
print(n // 1000000 % 10)
print(n // 100000 % 10)
print(n // 10000 % 10)
print(n // 1000 % 10)
print(n // 100 % 10)
print(n // 10 % 10)
print(n // 1 % 10)

# буде:
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8

#####################ДВУХ та ТРИЗНАЧНЕ ЧИСЛО  // % :
n = int(input("напишіть двузначне чило: "))
m = int(input("напишіть тризначне чило: "))
print()
if len(str(n)) == 2:
    print('ось десятки двузначного числа: ', n // 10 % 10)
    print('ось одиниці двузначного числа: ', n % 10)
    print('сума цих двох чисел =', n // 10 % 10 + n % 10)
    print('якщо цифри в цьому числі переставити місцями вийде: ', n % 10 * 10 + n // 10 % 10)
else:
    print('це ж не двузначе число!')
print()
if len(str(m)) == 3:
    print('це сотні тризначного числа: ', m // 100)
    print('це десятки тризначного числа: ', m // 10 % 10)
    print('це одиниці тризначного числа: ', m % 10)
    print('ці три числа в рядок через кому: ', end='')
    print(m // 100, m // 10 % 10, m % 10, sep=',')
    print('сума цих трох чисел =', m // 100 + m // 10 % 10 + m % 10, '.')
else:
    print('це ж не тризначе число!')

##################### // % :
# Напишите программу, в которой рассчитывается сумма и произведение цифр положительного трёхзначного числа.
# Формат входных данных
# На вход программе подаётся положительное трёхзначное число.
# Формат выходных данных
# Программа должна вывести два числа с поясняющим текстом: сумма цифр и произведение цифр.

n = int(input())
print('сумма цифр', n // 100 + n % 100 // 10 + n % 10)
print('произведение цифр', (n // 100) * (n % 100 // 10) * (n % 10))
print(n // 100)
print(n % 100 // 10)
print(n % 10)

##################### ПЕРЕСТАНОВКА ЦИФР (СИМВОЛІВ) // % :
# Дано трехзначное число abc, в котором все цифры различны.
# Напишите программу, которая выводит шесть чисел, образованных при перестановке цифр заданного числа.
# Формат входных данных:
# На вход программе подаётся положительное трёхзначное целое число, все цифры которого различны.
# Формат выходных данных:
# Программа должна вывести шесть чисел, образованных при перестановке цифр заданного числа в следующем порядке:
# abc, acb, bac, bca, cab, cba.
n = int(input())

a = (n // 100)
b = (n // 10 % 10)
c = (n % 10)
print(a, b, c, '\n', a, c, b, '\n', b, a, c, '\n', b, c, a, '\n', c, a, b, '\n', c, b, a, sep='')

# більш компактний розв'язок:
n = int(input())
a, b, c = (n // 100), (n // 10 % 10), (n % 10)
print(a, b, c, '\n', a, c, b, '\n', b, a, c, '\n', b, c, a, '\n', c, a, b, '\n', c, b, a, sep='')

# інший компактний розв'язок (для б.я. сомволів):
a, b, c = input()
print(a+b+c, a+c+b, b+a+c, b+c+a, c+a+b, c+b+a, sep='\n')

##################### Четырёхзначное число:
# Напишите программу для нахождения цифр четырёхзначного числа.
# Формат входных данных:
# На вход программе подаётся положительное четырёхзначное целое число.
# Формат выходных данных:
# Программа должна вывести текст Цифра в позиции тысяч равна, Цифра в позиции сотен равна,
# Цифра в позиции десятков равна, Цифра в позиции единиц равна.
n = int(input())
print('Цифра в позиции тысяч равна', n // 1000)
print('Цифра в позиции сотен равна', n // 100 % 10)
print('Цифра в позиции десятков равна', n % 100 // 10)
print('Цифра в позиции единиц равна', n % 10)

##################### ПАРНЕ / НЕ ПАРНЕ ЧИСЛО:
a, b, c = int(input('Введіть перше число: ')), int(input('Введіть друге число: ')), int(input('Введіть третє число: '))
n = 0   # лічильник, який напочатку = 0
if a % 2 == 0:  # залишок від ділення на 2 дорівнює нулю, якщо а - парне
    n += 1  # якщо а - парне, то лічильник збільшується на 1
if b % 2 == 0:
    n += 1
if c % 2 == 0:
    n += 1
print('з цих чисел парними є', n, 'шт.')

# Четные и нечетные числа
# Даны три целых числа A, B, C. Определить, есть ли среди них хотя бы одно четное и хотя бы одно нечетное.
# Числа A, B, C, не превышающие по модулю 10000.
# Одна строка – "YES" или "NO".
s = list(int(input()) for _ in range(3))
a = 'YES'
if s[0] % 2 == 0 and s[1] % 2 == 0 and s[2] % 2 == 0 or s[0] % 2 != 0 and s[1] % 2 != 0 and s[2] % 2 != 0:
        a = 'NO'
print(a)

# або так:
a, b, c = (int(input()) for _ in range(3))
t = 'YES'
if a % 2 == 0 and b % 2 == 0 and c % 2 == 0 or a % 2 != 0 and b % 2 != 0 and c % 2 != 0:
        t = 'NO'
print(t)

# більш короткий варіант розв'язку (ЧЕРЕЗ SET):
s = [int(input()) % 2, int(input()) % 2, int(input()) % 2]
print('YES' if len(set(s)) == 2 else 'NO')

##################### ПАРОЛЬ IF ELSE:
parol1, parol2 = str(input()), str(input())
if parol1 == parol2:
    print('Пароль принят')
else:
    print('Пароль не принят')

##################### 4-ЗНАЧНЕ ЧИСЛО:
n = int(input('напишіть 4-значне число: '))

n1 = n // 1000 #знаходимо першу цифру
n2 = n // 100 % 10 #знаходимо другу цифру
n3 = n % 100 // 10 #знаходимо третю цифру
n4 = n % 10 #знаходимо четверту цифру
if n1 + n4 == n2 - n3: #якщо перше+четверте = друге-третє
    print('ДА')
else:
    print('НЕТ')

# КОРОВЫ
# По данному числу n закончите фразу "На лугу пасется..." одним из возможных продолжений:
# "n коров", "n корова", "n коровы", правильно склоняя слово "корова".
# Дано число n (n<100).
# Программа должна вывести введенное число n и одно из слов (на латинице): korov, korova или korovy,
# например, 1 korova, 2 korovy, 5 korov. Между числом и словом должен стоять ровно один пробел.
n = int(input())
p = str()
m = n % 10
if m == 1 and n != 11:
    p = 'a'
elif m in [2, 3, 4] and n not in [12,  13, 14]:
    p = 'y'
print(f'{n} korov{p}')

##################### РАХУЄМО ПРОГРАМІСТІВ: (для 0 <= n <= 1000)
# В институте биоинформатики по офису передвигается робот.
# Недавно студенты из группы программистов написали для него программу, по которой робот, когда заходит в комнату,
# считает количество программистов в ней и произносит его вслух: "n программистов".
# Для того, чтобы это звучало правильно, для каждого nn нужно использовать верное окончание слова.
# Напишите программу, считывающую с пользовательского ввода целое число nn (неотрицательное),
# выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того,
# чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.
# В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи,
# как минимум до 1000 человек.
n = int(input())
if (n % 100 != 11) and (n % 10 == 1):
    print(n, 'програміст')
elif ((n % 10 == 2) or (n % 10 == 3) or (n % 10 == 4)) and not ((n % 100 == 12) or (n % 100 == 13) or (n % 100 == 14)):
    print(n, 'програмісти')
else:
    print(n, 'програмістів')

#  більш компактний варіант розв'язку:
t = 'программист'
i = int(input())
n = i % 100
m = n % 10
if m == 0 or 10 < n < 20 or 4 < m < 10:
    t += 'ов'
elif 1 < m < 5:
    t += 'а'
print(i, t)

#  або:
n = int(input())
d = n % 10
h = n % 100
if (n % 10) == 1 and (n % 100) != 11:
    s = ""
elif 1 < (n % 10) < 5 and not 11 < (n % 100) < 15:
    s = "а"
else:
    s = "ов"
print(n, " программист" + s)

# АПЕЛЬСИНЫ БОЧКАМИ
# Бизнесмен после прочтения известной книги решил открыть новый бизнес – отгружать апельсины бочками.
# Партнерам важно знать сколько именно бочек апельсинов отгружается каждый день.
# Мобильный телефон Василия поддерживает только транслит, поэтому он передает сообщения вида "N bochek" .
# Например, "3 bochki" или "1 bochka" .
# Напишите программу, которая выбирает правильное слово (из "bochka" , "bochek" , "bochki" ) в зависимости от N.
#  число N (0 ≤ N ≤ 1000).
# "bochka"  1,21,31
# "bochek"  5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,25,26,27,28,29,30
# "bochki"  2,3,4,22,23,24
n = int(input())
if n % 10 == 1 and n % 100 != 11:
    print(n, 'bochka')
elif n % 10 in [2, 3, 4] and n % 100 not in [12, 13, 14]:
    print(n, 'bochki')
else:
    print(n, 'bochek')

##################### ХИБНА ПАРОЛЯ:     (WHIL)
p = input('введіть паролю: ')
n = 1
while p != '123' and n < 3:
    print('пароля не правильна!')
    p = input('введіть ще раз: ')
    n += 1
    if n == 3 and p != '123':
        print('ви зробили 3 невірних спроби!')
    if p == '123':
        print('ПАРОЛЯ ПРАВИЛЬНА !')
        print('було зроблено хибних спроб: ', n)


##################### ЯЛИНКА ІЗ ЗІРОЧОК:        (WHIL)
n = int(input())    # к-сть зірочок в останньому рядку
c = 1   # початкова к-сть зірочок
while c < n:
    print('*' * c) # множимо з кожною ітерацією зірочку * на к-сть с
    c += 1  # к-сть збільшуєм на 1

## інший варіант:
n = int(input())
c = '*'
while len(c) < n:
    print(c)
    c += '*'


##################### СУМА ЧИСЕЛ НА ВІДРІЗКУ ВІД a ДО b :       (WHIL)
a, b = int(input()), int(input())
su = 0  # на початку сума = 0
i = a
while i <= b:
    su += i     # з кодним циклом додаємодо загальної суми su значення i+1
    i += 1
print(su)

#################### СУМА ВСІХ ВВЕДЕНИХ ЧИСЕЛ ПІСЛЯ 0 :     (WHIL)
# Напишите программу, которая считывает со стандартного ввода целые числа,
# по одному числу в строке,
# и после первого введенного нуля выводит сумму полученных на вход чисел.
n = int(input())
su = 0
while n != 0:
    su += n
    n = int(input())
print(su)

#   Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде,
#   выигравшей соревнование, при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога.
#   И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.
a, b = int(input()), int(input())
p = 1
while p % a != 0 or p % b != 0:
    p += 1
print(p)

#################### join і split:
n = ['4', '7', '5', '6']
print('23'.join(n))  # зліпили зі списка рядок і між елементами поставили 23
print(('23'.join(n)).split('23'))  # розбили рядок на список елментів по '23'

#################### BREAK i CONTINUE i SPLIT:
i = 0
numb = int(input('Введіть кількість бажаних виразів: '))
print('Кількість виразів:', numb)
while i < numb:
    a, b = input('Введіть два числа через пробіл: ').split()
    a = int(a)
    b = int(b)
    # if (a == 0) and (b == 0):
    #     print('Закінчення роботи. ')
    #     break
    if (a == 0) or (b == 0):
        print('Нулі ігнорую')
        continue
    print('a * b =', a * b)
    print('Зараховано, ', end='')
    i += 1
    print('залишилось виразів: ', numb - i)
else:
    print('Кількість виразів вичерпано')

#################### WHILE:                                                                                 (WHILE)
# Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
# Для каждого введённого числа проверить:
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.

#  безкінечний цикл:
while True:
    a = int(input('a = '))
    b = int(input('b = '))
    print(f'{a} + {b} = {a + b}')

while True:
    n = int(input('введіть число: '))
    if n < 10:
        continue
    if n > 100:
        break
    print('n =', n)

# На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Концом последовательности является слово «КОНЕЦ» (без кавычек).
# Напишите программу, которая выводит члены данной последовательности.
n = str(input())
while n != 'КОНЕЦ':
        print(n)
        n = str(input())

# На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Концом последовательности являются слова «КОНЕЦ» или «конец» (без кавычек).
# Напишите программу, которая выводит члены данной последовательности.
n = str(input())
while n != 'КОНЕЦ' and n != 'конец':
    print(n)
    n = str(input())

# На вход программе подается последовательность целых чисел делящихся на 7, каждое число на отдельной строке.
# Концом последовательности является любое число не делящееся на 7.
# Напишите программу, которая выводит члены данной последовательности.
n = int(input())
while n % 7 == 0:
    print(n)
    n = int(input())

# На вход программе подается последовательность целых чисел от 1 до 5, каждое число на отдельной строке.
# Концом последовательности является любое отрицательное число, либо число большее 5.
# Напишите программу, которая выводит количество пятерок.
x = int(input())
c = 0
while x > 0 and x <= 5:
    if x == 5:
        c += 1
    x = int(input())
print(c)

# більш компактній варіант розв'язку:
n, k = int(input()), 0
while 1 <= n <= 5:
    k += n == 5  # k = k + n тільки при n == 5 (коли умова = True ('n == 5' => 1), коли умова = False ('n == 5' => 0))
    n = int(input())
print(k)

# На вход программе подается одно натуральное число, цена за услугу.
# Продавец принимает только монеты с номиналами 1, 5, 10, 25.
# Напишите программу, которая определяет какое минимальное количество монет нужно заплатить
n = int(input())
c = 0
while n - 25 >= 0:
    n -= 25
    c += 1
while n - 10 >= 0:
    n -= 10
    c += 1
while n - 5 >= 0:
    n -= 5
    c += 1
while n - 1 >= 0:
    n -= 1
    c += 1
print(c)

# більш компактній варіант розв'язку:
n = int(input())
с = 0
for i in (25, 10, 5, 1):
    while n // i > 0:
        с += 1
        n -= i
print(с)

# інший варіант розв'язку:
n = int(input())
print(n // 25 + n % 25 // 10 + n % 25 % 10 // 5 + n % 5)

# Напишем программу, которая определяет есть ли в числе цифра 17.
n = int(input())
flag = False
while n != 0:  # цикл закінчиться, коли повідщипуємо від n всі цифри і n буде дорівнвати 0
    last_n = n % 100  # відщипуємо останні дві цифри числа і перевіряємо чи = вони 17:
    if last_n == 17:
        flag = True  # якщо вони = 17, то піднімаємо flag і витираємо тільки одну останню цифру:
    n = n // 10

if flag == True:
    print('YES')
else:
    print('NO')

# Задано единственное число N, не больше 1000.
# Необходимо вывести  сумму цифр числа N.
n = int(input())
last = 0
while n != 0:
    last += n % 10
    n //= 10
print(last)

# Программа получает на вход последовательность целых неотрицательных чисел, каждое число записано в отдельной строке.
# Последовательность завершается числом 0, при считывании которого программа должна закончить свою работу и
# вывести количество членов последовательности (не считая завершающего числа 0).
# Числа, следующие за числом 0, считывать не нужно.
c = 0
n = int(input())
while n != 0:
    n = int(input())
    c += 1
print(c)

# Определите сумму всех элементов последовательности, завершающейся числом 0.
# Числа, следующие за нулем, считывать не нужно.
c = 0
n = int(input())
while n != 0:
    c += n
    n = int(input())
print(c)

# Определите среднее арифметическое элементов последовательности, завершающейся числом 0.
# Число 0 в последовательность не входит. Числа, следующие за нулем, считывать не нужно.
n, c, t = int(input()), 0, 0
while n != 0:
    c += n
    t +=1
    n = int(input())
print(int(c / t))

# Определите количество четных элементов в последовательности, завершающейся числом 0.
# Само число 0, и все, что следует за ним, учитывать не нужно.
c = 0
n = int(input())
while n != 0:
    if n % 2 == 0:
        c +=1
    n = int(input())
print(c)

# Последовательность состоит из натуральных чисел и завершается числом 0.
# Определите значение наибольшего элемента последовательности.
# Числа, следующие за нулем, считывать не нужно.
c = 0
n = int(input())
while n != 0:
    if n > c:
        c = n
    n = int(input())
print(c)



# Задано единственное число N, не больше 1000.
# Необходимо вывести количество нулей среди всех цифр числа N.
n = int(input())
zero = 0
while n != 0:
    last = n % 10
    if last == 0:
        zero += 1
    n //= 10
print(zero)

#  Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.
n = int(input())
while n != 0:
    print(n % 10)
    n = n // 10

# Дано натуральное число n,(n≥10).                                                         (max и min)
# Напишите программу, которая определяет его максимальную и минимальную цифры.
n, n_max, n_min = int(input()), 0, 9
while n != 0:
    last_n = n % 10
    if last_n > n_max:
        n_max = last_n
    if last_n < n_min:
        n_min = last_n
    n = n // 10
print('Максимальная цифра равна', n_max)
print('Минимальная цифра равна', n_min)

# інший варіант розв'язку:                                                                  (БЕЗ IF)
n, x, m = int(input()), -1, 10
while n:
    x = max(x, n % 10)
    m = min(m, n % 10)
    n //= 10  # через несколько итераций остаток от деления на 10 станет = 0 - это будет "СТОП"
print('Максимальная цифра равна', x)
print('Минимальная цифра равна', m)

# інший варіант розв'язку:                                                          (max() і min())
x = str(input())
print('Максимальная цифра равна', max(x))
print('Минимальная цифра равна', min(x))

# Количество элементов, равных максимуму
# Последовательность состоит из натуральных чисел и завершается числом 0.
# Всего вводится не более 10000 чисел (не считая завершающего числа 0).
# Определите, сколько элементов этой последовательности равны ее наибольшему элементу.
# Числа, следующие за числом 0, считывать не нужно.
# 1
# 3
# 3
# 1
# 0
# >> 2
s = []
c = 0
while c != 10 ** 4:
    n = int(input())
    if n == 0:
        break
    s.append(n)
    c += 1
print(s.count(max(s)))

# інший варіант розв'язку:
print((lambda x: x.count(max(x)))(list(map(int, iter(input, "0")))))

# інший варіант розв'язку:
l=[int(i) for i in iter(input,'0')]
print(l.count(max(l)))

# Дано натуральное число. Напишите программу, которая вычисляет:
# 1) сумму его цифр;
# 2) количество цифр в нем;
# 3) произведение его цифр;
# 4) среднее арифметическое его цифр;
# 5) его первую цифру;
# 6) сумму его первой и последней цифры.
num = int(input())
sum_n = len_n = f_n = 0
multi_n = 1
n = num
while n:
    sum_n += n % 10
    multi_n *= n % 10
    if len_n != 0:
        f_n = n
    len_n += 1
    n //= 10
print(sum_n, len_n, multi_n, sum_n / len_n, f_n, f_n + num % 10, sep='\n')

# інший варіант розв'язку:
n, sm, kol, pr = int(input()), 0, 0, 1
np = n % 10
while n != 0:
    sm += n % 10
    kol += 1
    pr *= n % 10
    n1 = n
    n = n // 10
print(sm, kol, pr, sm/kol, n1, n1+np, sep='\n')

# Дано натуральное число n, (n > 9).
# Напишите программу, которая определяет его вторую (с начала) цифру.
n = int(input())
c = len(str(n))
while n:
    last_n = n % 10
    if int(c) == 2:
        print(n % 10)
        break  #                                                                   (break)
    n //= 10
    c -= 1

# інший варіант розв'язку:
n = int(input())
while n > 9:
    x = n % 10
    n //= 10
print(x)

# інший варіант розв'язку:
n = int(input())
while n > 99:
    n //= 10
print(n % 10)

# компактний варіант розв'язку:
num = input()
print(num[1])

# Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.
# Программа должна вывести «YES» если число состоит из одинаковых цифр и «NO» в противном случае.

# 12345
n, n_max, n_min = int(input()), 0, 9
while n:
    max_n = n % 10
    if n_max < n % 10:
        n_max = n % 10
    if n_min > n % 10:
        n_min = n % 10
    n //= 10
if n_max == n_min:
    print('YES')
else:
    print('NO')

# компактний варіант розв'язку:
n = int(input())
last_n = n % 10
answer = 'YES'
while n != 0:
    if last_n != n % 10:
        answer = 'NO'
    n = n // 10
print(answer)

#ще один варіант:
num = str(input())
max, min = max(num), min(num)
if max == min:
    print('YES')
else:
    print('NO')

# Дано натуральное число.
# Напишите программу, которая определяет, является ли последовательность его цифр при просмотре справа налево
# упорядоченной по неубыванию (655532110, 43321, 2222222).
# варіант розв'язку:
n = int(input())
a = n % 10
flag = 'YES'
while n:  # n != 0
    last_n = n % 10
    if last_n < a:
        flag = 'NO'
    else:
        a = last_n
    n //= 10  #  n = n // 10
print(flag)

# інший варіант розв'язку:
n = int(input())
flag = True
while n > 9:
    last_n = n % 10
    n //= 10
    if n > 0:
        flag = (last_n <= n % 10) and flag
if flag:
    print('YES')
else:
    print('NO')


# В первый день спортсмен пробежал X километров.
# В каждый последующий день он увеличивал пробег на 15% от предыдущего дня.
# Вам необходимо определить номер дня, в который пробег спортсмена составил не менее Y километров.
# Само число Y будем поступать на вход программе.
# Программа получает на вход два положительных вещественных числа X и Y (X,Y ≤ 1000).
# Выведите целое число – номер дня, в который спортсмен пробежал не менее Y километров.
x, y = (int(i) for i in input().split())
c = 1
while x <= y:
    x *= 1.15
    c += 1
print(c)

# Возьмём число. Умножим его на его же первую цифру. Результат умножим на первую цифру результата. И так далее.
# Например, начнём с 8:
# 8 \to 8*8=64 \\ 64 \to 6*64=384 \\ 384 \to 3*384 =1152 \\ 1152 \to 1*1152 =11528→8∗8=64
# 64→6∗64=384
# 384→3∗384=1152
# 1152→1∗1152=1152
# Очевидно, когда первая цифра очередного числа в такой последовательности становится равной 1,
# числа перестают изменяться. Но это происходит не при всех начальных числах.
# Напишем программу, которая будет хотя бы приблизительно определять судьбу введённого числа n.
# Начиная с числа n, умножайте имеющееся число на его первую цифру, пока у получившегося числа первая цифра
# не станет равной 1, либо пока оно не превысит миллиарда.
# В качестве ответа выведите результат
n = int(input())
while str(n)[0] != '1':
    n *= int(str(n)[0])
    if n >= (10 ** 9):
        break
print(n)

# інший варіант:
s = input()
while True:
    if int(s) > 10 ** 9 or s[0] == "1":
        break
    s = str(int(s[0]) * int(s))
print(s)

# інший варіант:
n = input()
while int(n) < 10 ** 9 and int(n[0]) != 1:
    n = str(int(n[0]) * int(n))
print(n)

# У Васи есть n пар носков. Утром каждого дня, собираясь в школу, Вася должен надеть пару носков.
# Вечером, прийдя со школы, Вася снимает надетые носки и выбрасывает их.
# Каждый m-й день (в дни с номерами m,2m,3m,...) мама покупает Васе одну пару носков.
# Она делает это поздно вечером, поэтому Вася может надеть новые носки не раньше следующего дня.
# На сколько подряд идущих дней Васе хватит носков?
#
# В единственной строке записано два целых числа n и m (1≤n≤100; 2≤m≤100), разделенные пробелом.
n, m = (int(i) for i in input().split())
d = 0
while n:
    d += 1
    n -= 1
    if d % m == 0:
        n += 1
print(d)

# У Василия есть a свечей. Когда Василий зажигает новую свечу, сначала она горит ровно один час, а затем тухнет.
# Василий — сообразительный малый, поэтому из b потухших свечей он умеет получать одну новую свечу.
# В последствии эту новую свечу (так же как и другие новые свечи) можно зажечь.
# Теперь Василию интересно, на сколько часов освещения хватит его свечек, если он будет действовать оптимальным образом.
# Помогите ему найти это число.
# В единственной строке заданы два целых числа a и b (1≤a≤1000; 2≤b≤1000).
# Выведите единственное целое число — количество часов, которое Василий сможет освещать комнату.
# 4 2  >> 7
# 7 3  >> 9
a, b = map(int, input().split())
h = a
while a // b != 0:
    a = a // b
    h += a
print(h)

# компактний варіант розв'язку:
a, b = map(int, input().split())
print((a * b - 1) // (b - 1))

# Лимак собирается принять участие в соревновании по спортивному программированию.
# Соревнование начнётся в 20:00 и будет продолжаться четыре часа, то есть ровно до полуночи.
# Участникам будет предложено n задач, упорядоченных по возрастанию сложности, то есть задача 1 будет самой лёгкой,
# а задача номер n — самой сложной. Лимак знает, что ему потребуется 5·i минут на решение i-й задачи.
# Друзья Лимака планирую устроить роскошную новогоднюю вечеринку и Лимак хочет прибыть в полночь или ранее.
# Он знает, что ему требуется ровно k минут чтобы добрать до места проведения вечеринки от своего дома,
# где он собирается участвовать в соревновании.
# Сколько максимум задач может успеть решить Лимак, так чтобы не опоздать на новогоднюю вечеринку?
# В первой строке входных данных записаны два целых числа n и k (1≤n≤10, 1≤k≤240) — количество задач в соревновании
# и количество минут, за которое Лимак доберётся от дома до места проведения вечеринки.
# Выведите одно целое число, равное максимальному количеству задач, которое может решить Лимак,
# так чтобы прибыть на новогоднюю вечеринку ровно в полночь или раньше.
# 3 222 >> 2
# 4 190 >> 4
# 7 1   >> 7  t = 239
n, k = map(int, input().split())
t = 4 * 60 - k
i = 0
while (t - 5 * i) > 0 and i < n:
    i += 1
    t -= 5 * i
print(i)

# інший варіант розв'язку:
a, b = map(int, input().split())
s, x = 0, 5
while x < 240 - b and s < a:
    s = s + 1
    x = x + (5 * s)
print(s)

# СЛИЯНИЕ СПИСКОВ
# В вашем распоряжении имеется два отсортированных списка по неубыванию элементов, состоящих из n и m элементов
# Ваша задача слить их в один отсортированный список размером  n + m
# Программа получает на вход два числа n и m - количество элементов первого списка и второго списков
# Затем с новой строки поступают элементы первого отсортированного списка, а со следующей строки - второго списка
# Слить два списка в один в порядке неубывания и вывести элементы полученного списка
# P.S: пользоваться встроенной сортировкой запрещено
# 3 5
# 2 8 8
# 3 4 5 5 10
# >> 2 3 4 5 5 8 8 10
n, m = map(int, input().split())
s1 = list(map(int, input().split()))
s2 = list(map(int, input().split()))
c1, c2 = 0, 0
S = []
while c1 < len(s1) and c2 < len(s2):
    if s1[c1] < s2[c2]:
        S.append(s1[c1])
        c1 += 1
    else:
        S.append(s2[c2])
        c2 += 1

if c1 < len(s1):
    S += s1[c1:]
if c2 < len(s2):
    S += s2[c2:]
print(*S)

# більш компактний варіант розв'язку:
len1, len2 = map(int, input().split())
l1 = list(map(int, input().split()))
l2 = list(map(int, input().split()))
l3 = l2 + l1
RES = []
while len(l3) != 0:
    RES.append(min(l3))
    l3.remove(min(l3))
print(*RES)

# Дело о нулях и единицах
# строка длины n, состоящая из нулей и единиц.
# Рассмотрим следующую операцию — мы выбираем любые две соседние позиции в строке, и если в одной из них ноль,
# а в другой — единица, то разрешается удалить обе эти цифры, в результате чего строка строка становится длины n-2.
# В первой строке входных данных задано целое число n (1≤n≤2·105) — длина строки.
# Во второй строке записана строка длины n, состоящая из нулей и единиц.
# 11101001011  >> 3
# 1100  >> 0
n = int(input())
s = input()
while '0' in s and '1' in s:
    s = s.replace('01', '')
    s = s.replace('10', '')
print(len(s))

# В архитектуре компьютера важную роль играют числа, являющиеся степенями двойки: 1, 2, 4, 8 и так далее.
# Напишите программу, которая проверяет, является ли введённое натуральное число степенью двойки.
# Если да, то выводится сама эта степень; если нет, выводится «НЕТ»
# 8 >> 3
# 6 >> HET
n = int(input())
c = 0
while n != 1:
    if n % 2 == 0:
        n //= 2
        c += 1
    else:
        c = 'НЕТ'
        break
print(c)

#                                           А Л Г Р И Т М   Е В К Л І Д А - 1
# Даны два натуральных числа A и B. Требуется найти их наибольший общий делитель (НОД) методом вычитания
a, b = map(int, input().split())
c = int()
while c != b:
    if a < b:
        a, b = b, a
    c = a - b
    a = c
print(c)

# інший варіант:
a, b = map(int, input().split())
while a != b:
  a, b = b, max(a, b) - min(a, b)
print(a)

#                                           А Л Г Р И Т М   Е В К Л І Д А - 2
# Та же самая задача, необходимо найти НОД двух чисел,
# только теперь нужно модернизировать свой код при помощи нахождения остатка от деления
a, b = map(int, input().split())
while b > 0:
    a, b = b, a % b
print(a)

#                                           А Л Г Р И Т М   Е В К Л І Д А - 3            (НАЙМЕНШЕ СПІЛЬНЕ КРАТНЕ)
# Даны два натуральных числа A и B. Требуется найти их наименьшее общее кратное (НОК).
a, b = map(int, input().split())
с = a * b
while b > 0:
    a, b = b, a % b
print(int(с / a))

# варіант функції:
def NSK(a, b):
    c = a * b
    while b > 0:
        a, b = b, a % b
    return int(c / a)

# УЛИТКА
# Улитка ползёт по вертикальному шесту высотой h метров, поднимаясь за день на a метров,
# а за ночь спускаясь на b метров. На какой день улитка доползёт до вершины шеста?
# Программа получает на вход натуральные числа h, a, b. Гарантируется, что a>b.
# Программа должна вывести одно натуральное число.
h, a, b = (int(input()) for _ in range(3))
day = 1
for i in range(h):
    h -= a
    if h > 0:
        h +=  b
        day += 1
print(day)

# більш компактний варіант розв'язку:
h, a, b = (int(input()) for _ in range(3))
print((h - b - 1) // (a - b) + 1)

# Проверьте делимость
# Даны два натуральных числа n и m. Если одно из них делится на другое нацело, выведите 1, иначе выведите 0.
# При решении этой задачи нельзя пользоваться условной инструкцией if и циклами.
n, m = int(input()),  int(input())
print((n % m == 0 or m % n == 0) * 1)

# Максимум
# Напишите программу, которая считывает два целых числа a и b и выводит наибольшее значение из них.
# Числа — целые от 1 до 1000.
# При решении задачи можно пользоваться только целочисленными арифметическими операциями +, -, *, //, %, =.
# Нельзя пользоваться нелинейными конструкциями: ветвлениями, циклами,
# функциями вычисления модуля, извлечения квадратного корня.
# Не пользуйтесь функциями типа max!
a, b = int(input()),  int(input())
print(a * (a >= b) + b * (b > a))

#################### Дано положительное действительное число. Выведите его дробную часть:
n = float(input())
n = str(n).split('.')
print('0.', end='')
print(n[1])

#################### Напишите программу, которая упорядочивает три числа от большего к меньшему: (MIN MAX)
a, b, c = int(input()), int(input()), int(input())
print(max(a, b, c))
print(a + b + c - max(a, b, c) - min(a, b, c))
print(min(a, b, c))

#################### Интересное число:
# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине цифре.
# Напишите программу, которая определяет интересное число или нет.
# Если число интересное, следует вывести – «Число интересное» иначе «Число неинтересное».
n = int(input())
n1 = n // 100
n2 = n % 100 // 10
n3 = n % 10
if max(n1, n2, n3) == n1 + n2 + n3 - max(n1, n2, n3):
    print('Число интересное')
else:
    print('Число неинтересное')

#  більш компактний варіант розв'язку:
x = int(input())
a = x % 10
b = x // 10 % 10
c = x // 100
if a + b + c == 2 * max(a, b, c):
    print("Число интересное")
else:
    print("Число неинтересное")

# ЕКВЛІДОВА ВІДСТАНЬ: (модуль MATH)
from math import sqrt, pow
x1, y1, x2, y2 = float(input()), float(input()), float(input()), float(input())
print(sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2)))

# квадратний корінь + дискримінант:
from math import sqrt, pow
a, b, c = float(input()), float(input()), float(input())
D = pow(b, 2) - 4 * a * c
print('D =', D)
if D < 0:
    print('Нет корней')
elif D == 0:
    print('x =', -(b / (2 * a)))
elif D > 0:
    print(min((-b + sqrt(D)) / (2 * a), (-b - sqrt(D)) / (2 * a)))
    print(max((-b + sqrt(D)) / (2 * a), (-b - sqrt(D)) / (2 * a)))

#################### (модуль MATH)
# За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров?
# натуральные числа n и m, не превосходят 10000
import math
n, m = int(input()), int(input())
print(math.ceil(m // n + m % n/100))
# або print(abs(-m//n)) - такая особенность Python 3 (отрицательные числа округляет дальше от нуля)

# Парты
# В некоторой школе решили набрать три новых математических класса и оборудовать кабинеты для них новыми партами.
# За каждой партой может сидеть два учащихся. Известно количество учащихся в каждом из трех классов.
# Выведите наименьшее число парт, которое нужно приобрести для них.
# Программа получает на вход три натуральных числа: количество учащихся в каждом из трех классов (не превышают 1000).
from math import ceil
suma = 0
kl = list(int(input()) for _ in range(3))
for i in kl:
    suma += ceil(i / 2)
print(suma)

#  більш компактний варіант розв'язку:
print(sum([ceil(int(input()) / 2) for _ in range(3)]))

#################### str() len() max() min() + key:
#  Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.
#  Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.
n1, n2, n3 = str(input()), str(input()), str(input())
if min(len(n1), len(n2), len(n3)) == len(n1):
    print(n1)
elif min(len(n1), len(n2), len(n3)) == len(n2):
    print(n2)
else:
    print(n3)
if max(len(n1), len(n2), len(n3)) == len(n1):
   print(n1)
elif max(len(n1), len(n2), len(n3)) == len(n2):
    print(n2)
else:
    print(n3)

#  більш компактний варіант розв'язку:
a, b, c = str(input()), str(input()), str(input())
print(min(a, b, c, key=len))
print(max(a, b, c, key=len))

#################### str() len() max() min():
#Вводятся 3 строки в случайном порядке.
# Напишите программу, которая выясняет можно ли из длин этих строк построить возрастающую арифметическую прогрессию.
#Программа должна вывести строку «YES», если из длин введенных слов можно построить арифметическую прогрессию,
# «NO» в ином случае.
a, b, c = str(input()), str(input()), str(input())
min_a = min(len(a), len(b), len(c))
max_c = max(len(a), len(b), len(c))
mid_b = len(a) + len(b) + len(c) - min_a - max_c
if mid_b == (max_c + min_a) / 2:
    print('YES')
else:
    print('NO')

#  більш компактний варіант розв'язку:
a, b, c = len(input()), len(input()), len(input())
if b == (min(a, b, c) + max(a, b, c))/2:
    print("YES")
else:
    print("NO")

#################### ОПЕРАТОР IN:
n = str(input())
if len(n) == 2 and n in '41ghse':
    print('рядок n довжиною 2 символи і ці символи співпадають з заданими "41ghse"')
##
stroke = input()
if 'есть подстрока' in stroke:
    print('YES')
else:
    print('NO')

# ТИП ТРЕУГОЛЬНИКА
# Определите тип треугольника (остроугольный, тупоугольный, прямоугольный) с данными сторонами.
# Даны три натуральных числа – стороны треугольника.
# Необходимо вывести одно из слов: right для прямоугольного треугольника, acute для остроугольного треугольника,
# obtuse для тупоугольного треугольника или impossible, если входные числа не образуют треугольника.
from math import sqrt
a, b, c = (int(input()) for _ in range(3))
a, b, c = sorted([a, b, c])
if a + b <= c:
    print('impossible')
elif c == sqrt((a * a) + (b * b)):
    print('right')
elif ((a * a) + (b * b) - (c * c)) / (2 * a * b) > 0:
    print('acute')
else:
    print('obtuse')

#################### КВАДРАТ ЗІРОЧОК 5х5: (FOR i in RANGE:)                                                 ( F O R )
n = 5
for i in range(n):
    print('*  ' * n)

# три рядки по шість зірочок: (for + for)
for i in range(3):
    for j in range(6):
        print('*  ', end='')
    print()

# Напишем программу, определяющую, что число является простым:                                          (ПРОСТЕ ЧИСЛО)
# 2, 3, 5, 7, 11, 13, 17, 19, 23, 27, 29, 31, 37, 39
n = int(input())
flag = '- це просте число'
for i in range(2, n // 2 + 1):  # якщо записати range(2, n) - буде дуууууже довго рахувати великі числа(1934234249)
    if n % i != 0:              # якщо записати range(2, int(num ** 0.5) + 1) - порахує в 4000 рази швидше range(2, n)
        flag = '- це складне число'
        break
    else:
        flag = '- це просте число'
print(n, flag)

# На вход программе подается два натуральных числа a и b (a < b).
# Напишите программу, которая находит все ПРОСТЫЕ ЧИСЛА от a до b включительно.
# (Число 1 простым не является.)
# 2, 3, 5, 7, 11, 13, 17, 19, 23, 27, 29, 31, 37, 39
a, b = int((input())), int(input())
for i in range(a, b + 1):
    c = 0  # лічильник ділення, перед кожним циклом "і" він обнуляється, для простих чисел він = 2 (1 і саме число)
    for j in range(1, i+1):  # кожне число діапазону [a;b] ділимо j (від 1 до цього числа)
        if i % j == 0:
            c += 1  # якщо ділиться, то лічильник +1
    if c == 2:  # після закінчення ділення числа і з відрізка [a;b] на кожне j, перевірємо лічильник чи = 2
        print(i)  # друкуємо, потім знову беремо чергове число "і" на початку циклу

# На первой строке вводится один символ — строчная буква.
# На второй строке вводится предложение.
# Нужно вывести список слов (словом считается часть предложения, окружённая символами пустого пространства),
# в которых присутствует введённая буква в любом регистре, в том же порядке, в каком они встречаются в предложении.
# a
# Mary had a little lamb.
#  >> Mary
#  >> had
#  >> a
#  >> lamb.
s = input()
t = list(input().split())
print(*(i for i in t if s in i), sep='\n')


# Программа которая выводит все числа от 100 до 1 в порядке убывания.
for i in range(100, 0, -1):
    print(i)

#################### ПОПУЛЯЦІЯ: (FOR i in RANGE)                                                           (FOR)
#Напишите программу, которая предсказывает размер популяции организмов.
# Программа должна выводить размер популяции в каждый день, начиная с 11 и заканчивая nn-м днем.
# На вход программе подается три натуральных числа m,p,n:
# m - стартовое количество организмов;
# p - среднесуточное увеличение в %;
# n - количество дней для размножения.

m, p, n = float(input()), int(input()), int(input())
for i in range(n):
    print(i + 1, m)
    m = m + m * p / 100

# Напишем программу, которая выводит те числа из промежутка [100; \, 1000], которые оканчиваются на 7:
for i in range(100, 1001):
    if i % 10 == 7:
        print(i)

#################### Последовательность чисел 2:
# Даны два целых числа m и n.
# Напишите программу, которая выводит все числа от m до n включительно в порядке возрастания, если m < n,
# или в порядке убывания в противном случае.
m, n = int(input()), int(input())
if m <= n:
    for i in range(m, n + 1):
        print(i)
if m > n:
    for i in range(m, n - 1, - 1):
        print(i)

#################### Последовательность чисел 3:
# Даны два целых числа m и n (m > n).
# Напишите программу, которая выводит все нечетные числа от mm до nn включительно в порядке убывания.
m, n = int(input()), int(input())
if m % 2 == 0:
    for i in range(m - 1, n - 1, -2):
        print(i)
else:
    for i in range(m, n - 1, -2):
        print(i)

#  більш компактний варіант розв'язку: (БЕЗ IF/ELSE)
m, n = int(input()), int(input())
t = ((m - 1) // 2) * 2 + 1
for i in range(t, n - 1, -2):
    print(i)

# ще один варіант:
m, n = int(input()), int(input())
for i in range(m - 1 + m % 2, n - 1, -2):  # для кратних двум (m % 2) буде = 1(True), для не кратних = 0(False) !
    print(i)

#################### Последовательность чисел 4:
# Даны два натуральных числа m и n ( m ≤ n).
# Напишите программу, которая выводит все числа от mm до nn включительно удовлетворяющие хотя бы одному из условий:
# число кратно 17;
# число оканчивается на 9;
# число кратно 3 и 5 одновременно.

m, n = int(input()), int(input())
for i in range(m, n + 1):
    if i % 17 == 0 or i % 10 == 9 or i % 3 == 0 and i % 5 == 0:
        print(i)
    elif m == n:
        print(m)

#  більш компактний варіант розв'язку:
m, n = int(input()), int(input())
for i in range(m, n + 1):
    if i % 17 == 0 or i % 10 == 9 or i % 15 == 0:
        print(i)

#################### Сума всіх чисел від 1 до 100:
t = 0
for i in range(1, 101):
    t = t + i
print('Сума всіх чисел від 1 до 100 =', t)

# Делимость на 11
# Для делимости числа на 11 необходимо, чтобы разность между суммой цифр, стоящих на четных местах,
# и суммой цифр, стоящих на нечетных местах, делилась на 11.
# Требуется написать программу, которая проверит делимость заданного числа на 11.
# Программа получает на вход одно натуральное число N, делимость которого надо проверить (1 ≤ N ≤ 1010000).
# Выведите “YES”, если число делится на 11, или “NO” иначе.
n = input()
par, nepar = 0, 0
for i in range(len(n)):
    if i % 2 == 0:
        par += int(n[i])
    else:
        nepar += int(n[i])
if par - nepar % 11 == 0:
    print('YES')
else:
    print('NO')

#

# На вход программе поддается строка, а ваша задача определить сколько символов в данной строке являются цифрами
# и также найти сумму всех этих цифр. Например, в строке "Комната 1408" содержится 4 цифры и их сумма равна 13.
# В качестве ответа необходимо через пробел вывести 2 числа - количество цифр в введенной строке и их сумма
# Droid R2-D2
# >> 2 4
s = input()
c, suma = 0, 0
for i in s:
    if i.isdigit():
        c += 1
        suma += int(i)
print(c, suma)

#################### ТАБЛИЦЯ ПІФАГОРА: (FOR I IN RANGE)
a, b, c, d = int(input()), int(input()), int(input()), int(input())
for k in range(c, d + 1):
    print('\t', k, end='')
print()
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print()

# більш компактний варіант розв'язку:
a, b, c, d = int(input()), int(input()), int(input()), int(input())
print('\t', *range(c, d+1), sep='\t')
for i in range(a,b+1):
    print(i, * range(i * c, (i * d) + 1, i), sep='\t')

#################### ЛІЧИЛЬНИК (COUNTER)
counter = 0
for i in range(10):
    n = int(input())
    if n > 10:
        counter += 1
print('З десяти спроб було введено', counter, 'чисел, які більше 10')

# також:
counter = 0
for i in range(14):
    n = int(input())
    if n % 2 == 0:
        counter += 1
print('з чотирнадцяти спроб, було введено парних чисел:', counter)

# також:
counter1 = 0
counter2 = 0
for i in range(7):
    n = int(input())
    if n % 2 == 0:
        counter1 += 1
    if n % 3 == 0:
        counter2 += 1
print('За сім спроб було введено чисел, що діляться на 2:', str(counter1) + 'шт.', end=', та ')
print('чисел, що діляться на 3:', str(counter2) + 'шт.')

# подсчитать количество чисел из диапазона [1; 100], квадрат которых оканчивается на 4:
counter = 0
for i in range(1, 20):
    if (i ** 2) % 10 == 4:
        counter += 1
print('В діапазоні від 1 до 100, кількість чисел, квадрат яких закінчується на 4:', str(counter) + 'шт.')

# Напишем программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.
total = 0
for i in range(10):
    n = int(input())
    if abs(n) > 10:
        total += abs(n)
print('Сума модулів введених чисел, які більше 10, становить:', total)

# напишем программу, которая запрашивает 10 целых чисел и находит их среднее значение:
total = 0
for i in range(10):
    n = int(input())
    total += n
print(n / 10)

# обмін значень між двума змінними через додаткову змінну temp (те саме що x, y = y, x):
x, y = int(input()), int(input())
print('було:')
print('x =', x, 'y =', y)
temp = x
x = y
y = temp
print('тепера:')
print('x =', x, 'y =', y)

# Напишем программу, определяющую, что натуральное число является ПРОСТЫМ:  (FLAG)
counter = 0
while counter < 10:
    n = int(input())
    flag = True
    for i in range(2, n):
        if n % i == 0:       # поділимо введене число на діапазон від 2 до n
            flag = False
    if n != 1 and flag == True:
        print('число ПРОСТЕ')
    else:
        print('число складне')
    counter += 1
print()
print('the end')

# Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее число и наименьшее
largest = -1  # бо треба вибрати з 10 додатних чисел, а більше -1 – нуль
smallest = 10
for i in range(10):
    n = int(input())
    if n > largest:
        largest = n
    if n < smallest:
        smallest = n
print('Найбільше число:', largest)
print('Найменше число:', smallest)
print('Їх сума буде:', largest + smallest)

# На вход программе подается натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.
# Напишите программу, которая подсчитывает сумму введенных чисел.
suma = 0
for i in range(int(input())):
  suma += int(input())
print(suma)

# Асимптотическое приближение:
from math import log
n, total = int(input()), 0
for i in range(1, n + 1):
    total += 1 / i
print(total - log(n))

# На вход программе подается натуральное число n.
# Напишите программу, которая подсчитывает сумму тех чисел от 1 до n (включительно),
# квадрат которых оканчивается на 2,5 или 8.
n, total = int(input()), 0
for i in range(1, n + 1):
    if i * i % 10 == 2 or i * i % 10 == 5 or i * i % 10 == 8:
        total += i
print(total)

#  більш компактний варіант розв'язку:
s = 0
for i in range(1, int(input()) + 1):
    s += i if i**2 % 10 in (2, 5, 8) else 0  # (замість 0 можна False)
print(s)

#                                                                                                   ФАКТОРІАЛ:
factorial = 1
for i in range(1, int(input()) + 1):
    factorial *= i
print(i, '! = ', factorial, sep='')

# СУМА ФАКТОРІАЛІВ:
f, sf = 1, 0
for i in range(1, int(input()) + 1):
    f *= i
    sf += f
print(sf)

# ЧИСЛО СОЧЕТАНИЙ
# По данным натуральным n и k вычислите значение  C = n!/k!(n-k)! (число сочетаний из n элементов по k).
# Входные данные
# Вводятся 2 числа - n и k (n > k; n, k <= 30 ).
n, k = int(input()), int(input())
N, K, NK = 1, 1, 1
for i in range(1, n + 1):
    N *= i
for j in range(1, k + 1):
    K *= j
for t in range(1, (n - k) + 1):
    NK *= t
print(int(N / (K * NK)))

# більш компактний розв'язок:
n, k = [int(input()) for i in '..']
f = 1
for i in range(1, n - k + 1):
    f *= (k + i) // i
print(f)

# По данному действительному числу a и натуральному n вычислите сумму 1+a+a^2+...+a^n,
# не используя формулу суммы геометрической прогрессии. Время работы программы должно быть пропорционально n.
a, n = int(input()), int(input())
t = 0
for i in range(n + 1):
    t += a ** i
print(t)

# більш компактний розв'язок:
a, n = int(input()), int(input())
print(sum([a**i for i in range(n + 1)]))

# Сумма - 1
# По данному числу n вычислите сумму 1+1/2^2+1/3^2+...+1/n^2.
# Вводится одно число n, не превосходящее 100000.
# Необходимо вывести  значение суммы, округляя до 5 знаков после запятой.
n, t = int(input()), 0
for i in range(1, n + 1):
    t += 1 / i ** 2
print(round(t, 5))

# Сумма - 2
# По данному числу n вычислите сумму 4*(1-1/3+1/5-1/7+...+(-1)^n/(2n+1)).
# Вводится одно число n, не превосходящее 100000.
# Необходимо вывести значение выражения, округляя до 5 знаков после запятой.
n, t = int(input()), 0
for i in range(n + 1):
    t += (-1) ** i / (2 * i + 1)
print(round((4 * t), 5))


# Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.
total = 1
for i in range(1, 11):
    n = int(input())
    if n != 0:
        total *= n
print(total)

#                                                                                       без IF:
total = 1
for _ in range(10):
    n = int(input())
    total *= n + (n == 0)
print(total)

# ЗНАКОЧЕРЕДУЮЩАЯСЯ СУММА:
# На вход программе подается натуральное число nn. Напишите программу вычисления знакочередующей суммы:
# 1−2+3−4+5−6+…+ (−1) ** (n + 1) * n.
s = 0
for i in range(1, int(input()) + 1):
    if i % 2 == 0:
        s += -1 ** (i + 1) * i
    else:
        s += 1 ** (i + 1) * i
print(s)

#                                                                                              без FOR:
n = int(input())
if (n % 2 == 0):
    print(-n // 2)
else:
    print(n // 2 + 1)

#                                                                                              без IF:
n, suma = int(input()), 0
for i in range(1, n + 1):
    suma += (-1) ** (i + 1) * i
print(suma)

# Напишите программу, которая считывает с клавиатуры два числа a и b,
# считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a; b], которые кратны числу 3.
t, r = 0, 0
for i in range(int(input()), int(input()) + 1):
    if i % 3 == 0:
        t += i
        r += 1
print(t / r)

# Вводятся целые числа a и b. Гарантируется, что a не превосходит b.
# Выведите (через пробел) все четные числа от a до b (включительно).
for i in range(int(input()), int(input()) + 1):
    if i % 2 == 0:
        print(i, end=' ')

# Вводятся 4 числа: a, b, c и d.
# Выведите все числа на отрезке от a до b, дающие остаток c при делении на d.
# Если таких чисел не существует, то ничего выводить не нужно.
a, b, c, d = int(input()), int(input()), int(input()), int(input())
for i in range(a, b + 1):
    if i % d == c:
        print(i, end=' ')

# Вводятся целые числа a и b. Гарантируется, что a не превосходит b.
# Выведите через пробел все числа на отрезке от a до b включительно, являющиеся полными квадратами.
# Если таких чисел нет, то ничего выводить не нужно.
from math import sqrt
a, b = int(input()), int(input())
for i in range(a, b + 1):
    if sqrt(i) % 1 == 0:
        print(i, end=' ')

# Найдите самый маленький натуральный делитель числа x, отличный от 1 (2 <= x <= 30000).    (BREAK)
x = int(input())
for i in range(2, 30001):  # можна написати range(2,n+1)
    if x % i == 0:
        print(i)
        break

# Выведите все натуральные делители числа x в порядке возрастания (включая 1 и само число).
x = int(input())
for i in range(1, x + 1):
    if x % i == 0:
        print(i, end=' ')


# Вводится число N, а затем N чисел. Подсчитайте и выведите, сколько среди данных N чисел нулей.
c = 0
for i in range(int(input())):
    n = int(input())
    if n == 0:
        c += 1
print(c)

# Подсчитайте, сколько среди данных n чисел: нулей, положительных чисел, отрицательных чисел.
c1 = c2 = c3 = 0
for i in range(int(input())):
    n = int(input())
    if n == 0:
        c1 += 1
    elif n > 0:
        c2 += 1
    else:
        c3 += 1
print(c1, c2, c3)

# Выведите YES, если среди n введенных чисел есть хотя бы один нуль, или NO в противном случае.
c = 0
for i in range(int(input())):
    n = int(input())
    if n == 0:
        c += 1
if c > 0:
    print('YES')
else:
    print('NO')

# Напишите программу, которая считывает последовательность из 10 целых чисел и
# определяет является ли каждое из них четным или нет.
# Программа должна вывести строку «YES», если все числа четные и «NO» в ином случае.
s = 'YES'
for i in range(10):
    if int(input()) % 2 == 0:
        s = "NO"
print(s)

# На вход программе подается натуральное число n, а затем n РАЗЛИЧНЫХ натуральных чисел, каждое на отдельной строке.
# Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности
largest1 = 0
largest2 = 1
for i in range(1, int(input()) + 1):
    n = int(input())
    if largest1 < n:
        largest2, largest1 = largest1, n
    elif largest2 < n:
        largest2 = n
print(largest1)
print(largest2)

# ще один варыант:
n = int(input())
t1 = t2 = 0
while n != 0:
    if n > t1:
        t1, t2 = n, t1
    elif n > t2:
        t2 = n
    n = int(input())
print(t2)

# інший варіант розв'язку:
n = int(input())
num = [int(input()) for i in range(n)]
largest = max(num)
num.remove(largest)
large = max(num)
print(largest)
print(large)

# ПРАВИЛЬНАЯ СКОБОЧНАЯ ПОСЛЕДОВАТЕЛЬНОСТЬ
# Наша программа принимает на вход последовательность скобочных символов.
# Ваша задача определить является ли введенная скобочная последовательность правильной.
# Правильная скобочная последовательность (ПСП) называется строка, состоящая только из символов "скобки",
# где каждой закрывающей скобке найдётся соответствующая открывающая (причём того же типа).
# При этом учитывайте, что:
# Пустая последовательность является правильной.
# Если A – правильная скобочная последовательность, то (A), [A] и {A} – правильные скобочные последовательности.
# Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.
# Если введенная строка является ПСП, выведите YES, в противном случае - NO.
# {[]}() >> YES
# [(]) >> NO
s = input()
for i in range (len(s) // 2): # // 2 - щоб в два рази швидше перебирало
    s = s.replace('()', '', 1)
    s = s.replace('[]', '', 1)
    s = s.replace('{}', '', 1)
if len(s) == 0:
    print('YES')
else:
    print('NO')

# Напишем программу, выводящую все числа, кратные 3, используя цикл for и while:
# для FOR:
for i in range(3, 101, 3):
    print(i, end=' ')

# для WHILE:
n = 3
while n <= 100:
    print(n, end=' ')
    n += 3

# Напишем программу, которая считывает числа и находит их сумму, до тех пор пока пользователь не введет слово 'sum'.
print('щоб порвхувати суму, введіть всі необхідні числа, потім введіть "sum": ')
t = input()
total = 0
while t != 'sum':
    n = int(t)
    total += n
    t = input()
print('Сума чисел дорівнює:', total)



n = [int(i) for i in input()]  #                                                                              [1, 2, 3]
print(n)
# 123 => [1, 2, 3]


# На вход программе подается число n > 1.
# Напишите программу, которая выводит его наименьший отличный от 1 делитель.                                (BREAK)
n = int(input())
for i in range(2, n + 1):
    if n % i == 0:
        print(i)
        break

#  більш компактний варіант розв'язку:
n, div = int(input()), 2
while n % div:  # поки n % div == 1 (тобто True), якщо n % div == 0 - то це False
    div += 1
print(div)

# На вход программе подается натуральное число n.
# Напишите программу, которая выводит числа от 1 до n включительно за исключением:
# чисел от 55 до 99 включительно;
# чисел от 1717 до 3737 включительно;
# чисел от 7878 до 8787 включительно.
#Используйте оператор continue
for i in range(1, int(input()) + 1):
    if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
        continue
    print(i)

# Слишком длинные слова
# Иногда некоторые слова вроде «civilization» или «internationalization» настолько длинны,
# что их весьма утомительно писать много раз в каком либо тексте.
# Будем считать слово слишком длинным, если его длина строго больше 10 символов.
# Все слишком длинные слова можно заменить специальной аббревиатурой.
# Эта аббревиатура строится следующим образом: записывается первая и последняя буква слова,
# а между ними — количество букв между первой и последней буквой (в десятичной системе счисления и без ведущих нулей).
# Таком образом, «civilization» запишется как «c10n», а «internationalization» как «i18n».
# Вам предлагается автоматизировать процесс замены слов на аббревиатуры. При этом все слишком длинные слова
# должны быть заменены аббревиатурой, а слова, не являющиеся слишком длинными, должны остаться без изменений.
# В первой строке содержится целое число n (1≤n≤100).
# В каждой из последующих n строк содержится по одному слову.
# Все слова состоят из малых латинских букв и имеют длину от 1 до 100 символов.
# Выведите n строк. В i строке должен находиться результат замены i-го слова из входных данных.
# 4
# word                                               >> word
# civilization                                       >> c10n
# internationalization                               >> i18n
# pneumonoultramicroscopicsilicovolcanoconiosis      >> p43s
n = int(input())
s = (input() for _ in range(n))
for i in s:
    if len(i) > 10:
        print(i[0] + str(len(i)-2) + i [-1])
    else:
        print(i)

# Найдите, в каких строках из введённых и в каком месте упоминается "рок", причем регистр букв не важен.
# Вместо явного цикла прохода по строке в цикле используйте подходящий метод строки.
# На первой строке вводится натуральное число N — количество строк.
# Далее следуют N строк.
# Для каждой строки, в которой есть сочетание символов «рок», нужно вывести (в порядке появления таких строк)
# номер этой строки (нумерация начинается с единицы) и номер символа, с которого начинается первое вхождение
# этой подстроки (нумерация символов также с единицы).
# 3
# Порок
# Учитель
# Рок
#  >> 1 3
#  >> 3 1
n = int(input())
s = [input().lower() for i in range(n)]
for i in s:
    if 'рок' in i:
        print(s.index(i) + 1, i.index('рок') + 1)

# інший варіант розв'язку:
for i in range(int(input())):
    s = input().lower()
    if "рок" in s:
        print(i + 1, s.find("рок") + 1)

####################################################################                                 (WHILE + ELSE)
n = 5
while n > 0:
    print(n)
    n -= 1
else:
    print('цикл завершено')

# Программа, которая определяет, содержит ли введенное пользователем число, цифру 7. (WHILE + BREAK + ELSE)
num = int(input())
n = num
while n:
    if n % 10 == 7:
        flag = 'є цифра 7'
        break
    n //= 10
else:
    flag = 'цифра 7 відсутня'
print('В числі', num, flag)

#                                                                                                       РЕВЬЮ КОДА-2
# На обработку поступает последовательность из 10 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# Нужно написать программу, которая выводит на экран сумму всех отрицательных чисел последовательности
# и максимальное отрицательное число в последовательности.
# Если отрицательных чисел нет, требуется вывести на экран «NO».
mx = -10 ** 6
s = 0
for i in range(5):
    x = int(input())
    if x < 0:
        s += x
        if x > mx:
            mx = x
if s < 0:
    print(s)
    print(mx)
else:
    print('NO')

# На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран максимальную цифру числа, кратную 3.
# Если в числе нет цифр, кратных 3, требуется на экран вывести «NO».
n = int(input())
max_3 = -1
while n > 0:
    last_n = n % 10
    if last_n % 3 == 0 and last_n > max_3:
        max_3 = last_n
    n //= 10
if max_3 >= 0:
    print(max_3)
else:
    print('NO')

# ПЕРША ЦИФРА НАТУРАЛЬНОГО ЧИСЛА:
n = int(input())
print('перша цифра числа', n, 'це', n // 10**(int(len(str(n))-1)))

# Дано натуральное число n, (n≤ 9). Напишите программу, которая печатает таблицу размером (n×3)
# состоящую из данного числа (числа отделены одним пробелом).
n = int(input())
for i in range(n):
    for _ in range(3):
        print(n, end=' ')
    print()

# Дано натуральное число n, (n≤ 9). Напишите программу, которая печатает таблицу размером n×5,
# где в i-ой строке указано число i (числа отделены одним пробелом).
n = int(input())
for i in range(n):
    for _ in range(5):
        print(i+1, end=' ')
    print()
# 1 1 1 1 1
# 2 2 2 2 2
# 3 3 3 3 3
# 4 4 4 4 4
# 5 5 5 5 5
# 6 6 6 6 6
# 7 7 7 7 7

# Дано нечетное натуральное число n.
# Напишите программу, которая печатает равнобедренный треугольник с основанием, равным n в соответствии с примером:
# *
# **
# ***
# ****
# ***
# **
# *

n = int(input())
for j in range(1, n - n // 2):
    print('*' * j)
for i in range(n - n // 2, 0, -1):
    print('*' * i)

# Дано натуральное число n.
# Напишите программу, которая печатает численный треугольник в соответствии с примером:
# 1
# 22
# 333
# 4444
# 55555
n = int(input())
for j in range(1, n+1):
    print(str(j)*j)

# 12 месяцев
# Решите уравнение в натуральных числах 28n + 30k + 31m = 365.
# Используйте вложенный цикл for. В первую очередь запишите решение с наименьшим значением n.
for n in range(1, 14):
    for k in range(1, 12):
        for m in range(1, 13):
            if 28 * n + 30 * k + 31 * m == 365:
                print('n =', n, ' k =', k, ' m =', m)

# Дано натуральное число n.
# Напишите программу, которая печатает численный треугольник с высотой равной n, в соответствии с примером:
                        # 1
                        # 121
                        # 12321
                        # 1234321
                        # 123454321
n = int(input())
for i in range(1, n):
    for j in range(1, i):
        print(j, end='')
    for k in range(i, 0, -1):
        print(k, end='')
    print()

#   інший варіант розв'язку:
n = int(input())
for i in range(1, n + 1):
    for j in range(1, 2 * i):
        print(min(j, 2 * i - j), end='')
    print()

#   інший варіант розв'язку:
n = int(input())
p = n
for j in range(1, n + 1):
    for i in range(1,  j + 1):
        print(i, end="")
    while i > 1:
        i -= 1
        print(i, end='')
    print()


#На вход программе подается натуральное число n.
# Напишите программу, которая находит цифровой корень данного числа.
# Цифровой корень числа nn получается следующим образом:
# если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс,
# то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.
n = int(input())
sum_n = 0  # общая сумма цифр
while len(str(sum_n)) > 1 or sum_n == 0:  # пока общая сумма не является одной цифрой или пока общая сумма "пустая"
    while n != 0:
        dig = n % 10  # берем последнюю цифру числа n
        if dig in (9, 0):  # блок if убирает 9 и 0 т.к. они не влияют на цифровой корень (прим.: 9109092 = 1 + 2)
            n //= 10
            if n == 0 and sum_n == 0 and dig == 9:  # блок if на случай если n состоит из одних девяток
                sum_n = dig  # возвращаем общей сумме 9 и поднимаемся на while
            continue
        if n % 10 + n % 100 // 10 == 9:  # блок if убирает две рядом стоящие цифры если их сумма = 9
            n //= 100
            continue  # и поднимаемся на while
        sum_n += dig  # прибавляем к общей сумме очередную цифру числа n
        if sum_n % 10 + sum_n % 100 // 10 == 9:  # блок if убирает цифры 9 и 0 теперь из общей суммы
            sum_n //= 100
        if sum_n % 10 == 9 or sum_n % 10 == 0:  # блок if убирает две цифры, сумма которых = 9 из общей суммы
            sum_n //= 10
        n //= 10
print(sum_n)

#  більш компактний варіант розв'язку:
n = int(input())
while n // 10 > 0:
    n = n // 10 + n % 10
print(n)

# У цифрового корня есть свойство: если из суммы всех цифр вычитать 9 до тех пор,
# пока не получится одна цифра, она и будет корнем.
n = int(input())
s =0
while n > 0:
  s += n%10
  if s > 9:
    s -=9
  n //= 10
print(s)

# На вход программе подается натуральное число n.
# Напишите программу, выводящую графическое изображение делимости чисел от 1 до n включительно.
# В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.
# для 5:
                        # 1+
                        # 2++
                        # 3++
                        # 4+++
                        # 5++
for i in range(1, int(input()) + 1):
    div = 0
    for j in range(1, i + 1):
        if i % j == 0:
            div += 1
    print(i, '+' * div, sep='')

# без лічильника:
n = int(input())
for i in range(1, n + 1):
    print(i, end="")
    for j in range(1, i + 1):
        if i % j == 0:
            print("+", end="")
    print()

# Дано натуральное число n.
# Напишите программу, которая печатает численный треугольник с высотой равной n, в соответствии с примером:
#
                        # 1
                        # 2 3
                        # 4 5 6
                        # 7 8 9 10
                        # 11 12 13 14 15
                        # 16 17 18 19 20 21
                        # ...
total = 0
for i in range(int(input())):
    for j in range(0, i+1):
        total += 1
        print(total, end=' ')
    print()

# КВАДРАТНОЕ УРАВНЕНИЕ
# Даны целые числа a, b, c (a не равно 0). Найдите все решения квадратного уравнения ax2 + bx + c = 0.
# Выведите два целых числа, если уравнение имеет два корня (выводить в порядке возрастания, через пробел),
# одно целое число – при наличии одного корня. При отсутствии целых корней ничего выводить не нужно.
a, b, c = (int(input()) for _ in range(3))
import math
D = (pow(b, 2) - 4 * a * c)
if D == 0:
    if -(b // (2 * a)) == int(-(b / (2 * a))):
        print(-(b // (2 * a)))
elif D > 0:
    x = min((-b + math.sqrt(D)) / (2 * a), (-b - math.sqrt(D)) / (2 * a))
    y = max((-b + math.sqrt(D)) / (2 * a), (-b - math.sqrt(D)) / (2 * a))
    if x == int(x) and y == int(y):
        print(int(x), int(y))

# Вводятся 4 числа: a, b, c и d.
# Найдите все целые решения уравнения ax3 + bx2 + cx + d = 0 на отрезке [0,1000] и выведите их в порядке возрастания.
# Если на данном отрезке нет ни одного решения, то ничего выводить не нужно.
a, b, c, d = (int(input()) for _ in range(4))
for x in range(0, 1001):
    if a * x ** 3 + b * x ** 2 + c * x + d == 0:
        print(x, end=' ')
# в зворотному порядку:
a, b, c, d = (int(input()) for _ in range(4))
for x in range(1000, -1, -1):
    if a * x ** 3 + b * x ** 2 + c * x + d == 0:
        print(x, end=' ')

#                                                                                                           ГНЧЭ-1
# ГНЧЭ-1  – сложное электронное устройство,
# выдающее каждую секунду очередное число последовательности 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5 ...
# Нужно разработать эмулятор для этого устройства.

n = int(input())
t, k = 1, 1
while k < n:
    for _ in range(t):
        print(t, end=' ')
    t += 1
    k += t
for _ in range(k - t, n):
    print(t, end=' ')

# ЗНАЙТИ С У М У 100 ЧИСЕЛ ВВЕДЕНИХ ЧЕРЕЗ ПРОБІЛ:
print(sum(int(i) for i in input().split()))

# Выведите все точные квадраты натуральных чисел, не превосходящие данного числа N.
# для 15:
# 1
# 4
# 9
n = int(input())
i = 1
while i**2 <= n:
    print(i**2)
    i += 1

# Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, отличный от 1.
n = int(input())
for i in range(2, n+1):
    if n % i == 0:
        print(i)
        break

# распечатайте все целые степени двойки, не превосходящие N, в порядке возрастания.
# для 50Ж
# 1 2 4 8 16 32
n = int(input())
mult = 1
while mult <= n:
    print(mult, end=' ')
    mult *= 2

# По данному натуральному числу N выведите такое наименьшее целое число k, что 2k≥N.
# Операцией возведения в степень пользоваться нельзя!
n = int(input())
total, d = 1, 2
while d < n:
    d *= 2
    total += 1
print(total)

# В первый день спортсмен пробежал x километров, а затем он каждый день увеличивал пробег на 10% от предыдущего значения.
# По данному числу y определите номер дня, на который пробег спортсмена составит не менее y километров.
x, y = int(input()), int(input())
day = 1
while x < y:
    x *= 1.1  # збілшуємо на 10%
    day += 1  # додаємо один день
print(day)

# Вклад в банке составляет x рублей.
# Ежегодно он увеличивается на p процентов, после чего дробная часть копеек отбрасывается.
# Каждый год сумма вклада становится больше. Определите, через сколько лет вклад составит не менее y рублей.
x, p, y, year = int(input()), int(input()), int(input()), 0
while x < y:
    x = x + x * p / 100
    x = int(x)  # відкидуємо копійки
    year += 1  # додаємо рік
print(year)

# На вход программе подается два натуральных числа a и b (a < b).
# Напишите программу, которая находит натуральное число из отрезка [a; b] с максимальной суммой делителей.
# Программа должна вывести два числа на одной строке, разделенных пробелом:
# число с максимальной суммой делителей и сумму его делителей.
# Если таких чисел несколько, то выведите наибольшее из них.
a, b = int(input()), int(input())
SUMA = 0
for i in range(a, b + 1):
    suma = 0  # suma під першим for щоб обнулялась пперед кожним перебором "і" !!!
    for j in range(1, i // 2 + 1):
        if i % j == 0:
            suma += j
        if suma >= SUMA:  # НЕ ЗАБУВАТИ ПРО "=" !!!
            SUMA = suma
            J = j
print(J, SUMA)

# На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран сумму чётных цифр этого числа или 0, если чётных цифр в записи нет.
n = int(input())  #
s = 0
while n != 0:  #
    if n % 10 % 2 == 0:  #
        s += n % 10  #
    n //= 10
print(s)

# На обработку поступает последовательность из 8 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# Нужно написать программу, которая выводит на экран количество делящихся нацело на 4 чисел
# в исходной последовательности и максимальное делящееся нацело на 4 число.
# Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO».
n = 8  #
count = 0
maximum = -10 ** 6 - 1  #
for i in range(1, n + 1):
    x = int(input())
    if x % 4 == 0:  #
        print('x=', x)
        count += 1
        if x > maximum:  #
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# На обработку поступает последовательность из 4 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# Нужно написать программу, которая выводит на экран количество нечётных чисел в исходной последовательности
# и максимальное нечётное число. Если нечётных чисел нет, требуется на экран вывести «NO».
n = 4
count = 0
maximum = -10 ** 6 - 1  #
for i in range(1, n + 1):
    x = int(input())
    if x % 2 != 0:
        print('x=', x)
        count += 1
        if x > maximum:
            maximum = x  #
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# На вход программе подается натуральное число nn.
# Напишите программу, которая печатает звездную рамку размерами n×19:
# *******************
# *                 *
# *                 *
# *******************
n = int(input())
print('*' * 19)
for i in range(n - 2):
    print('*', ' ' * 15, '*')
print('*' * 19)

# Дано натуральное число. Напишите программу, которая вычисляет:
# количество цифр 3 в нем;
# сколько раз в нем встречается последняя цифра;
# количество четных цифр;
# сумму его цифр, больших пяти;
# произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
# сколько раз в нем встречается цифры 0 и 5 (всего суммарно).

n = int(input())
sum_tri = 0
sum_l_dig = 0
sum_parni = 0
sum_five = 0
big_seven = 1
sum_zerofive = 0
l_dig = n % 10
while n != 0:
    last = n % 10
    if last == 3:
        sum_tri += 1
    if last == l_dig:
        sum_l_dig += 1
    if last % 2 == 0:
        sum_parni += 1
    if last > 5:
        sum_five += last
    if last > 7:
        big_seven *= last
    if last == 0 or last == 5:
        sum_zerofive += 1
    n //= 10
print(sum_tri)
print(sum_l_dig)
print(sum_parni)
print(sum_five)
print(big_seven)
print(sum_zerofive)

################################################### S T R I N G ###################################################

# На вход программе поступает строка, ваша задача удалить из нее все символы "w" и "z".
# Учитываем только маленькие буквы
print(input().replace('w', '').replace('z', ''))

# Программа получает на вход фразу, ваша задача посчитать из скольких слов состоит данная фраза.
# Для удобство будет считать словом любую последовательность символов.
print(len(input().split()))


# Напишите программу, которая вычисляет процентное содержание символов G (гуанин) и C (цитозин) в введенной строке
# (программа не должна зависеть от регистра вводимых символов).
# Например, в строке "acggtGTtat" процентное содержание символов G и C равно (4 \ 10) * 100 = 40.0
# где 4 - это количество символов G и C, а 10 - это длина строки.
s = input().upper()
print((s.count('C') + s.count('G')) / len(s) * 100)

# Дана строка, состоящая ровно из двух слов, разделенных пробелом.
# Переставьте эти слова местами. Результат запишите в строку и выведите получившуюся строку.
# При решении этой задачи нельзя пользоваться циклами и инструкцией if.
s = input()
print(s[s.find(' '):], s[:s.find(' ')])


#                                                 П А Л І Н Д Р О М:
s = 'palindrom'
i = 0
l = len(s) - 1
is_pal = True
while i < l:
    if s[i] != s [l]:
        is_pal = False
        break
    i += 1
    l -= 1
if is_pal:
    print('це паліндром')
else:
    print('це не паліндром')

# мій більш компактний розв'язок:                 П А Л І Н Д Р О М:
s = input()
i, j, flag = 0, -1, 'NO'
for _ in range(len(s) - 1):
    if s[i] != s[j]:
        break
    else:
        flag = 'YES'
    i += 1
    j -= 1
print(flag)

# більш простий спосіб:
s = input()
if s == s[::-1]:
    print('YES')
else:
    print('NO')


# Напишем программу, которая выводит каждый символ строки на отдельной строке:
s = 'abcdef'
for i in range(len(s)):
    print(s[i]) # передає змінній "і" послідовно всі символи рядка "s"
# або:
s = 'abcdef'
for c in s:
    print(c)  # передає змінній циклу "с" значення кожного символу рядка "s"

s = '01234567891011121314151617'
for i in range(0, len(s), 5):
    print(s[i], end='')
#  => 051217

# ДВЕ ОДИНАКОВЫЕ БУКВЫ
# Дана строка. Известно, что она содержит ровно две одинаковые буквы.
# Найдите эти буквы. Гарантируется, что повторяются буквы только одного вида.
s = input()
for i in s:
    if s.count(i) == 2:
        print(i)
        break

# У второклассников очень популярна следующая задача:                              Б У Б Л И К И
# 101=1
# 8181515=4
# 1111112=0
# 8888888=14
# 1010101=3
# 7000007=?
# Преподавателю программирования в некоем Центре для одаренных детей так понравилась эта задачка,
# что он решил именно ее использовать для проверки знаний математики 2-го класса у своих учеников.
# Пусть первое число x, а соответствующее ему n.
# 069
# 8
s = input()
t = 0
s1 = '069'
s2 = '8'
for i in s:
    if i in s1:
        t += 1
    if i in s2:
        t += 2
print(t)

# На вход программе подается одна строка. Напишите программу,
# которая выводит элементы строки с индексами 0, 2, 4, ... в столбик.
s = input()
for i in range(0, len(s), 2):
    print(s[i])

#На вход программе подается одна строка.
# Напишите программу, которая выводит в столбик элементы строки в обратном порядке.
s = input()[::-1]
for i in s:
    print(i)

# На вход программе подаются три строки: имя, фамилия и отчество.
# Напишите программу, которая выводит инициалы человека'Ф.И.О.'
n, f, b = input(), input(), input()
print(f[0], n[0], b[0], sep='.')

# На вход программе подается одна строка состоящая из цифр.
# Напишите программу, которая считает сумму цифр данной строки.
suma = 0
for i in input():
    suma += int(i)
print(suma)

# більш компактний вигляд:
print(sum(int(i) for i in input()))

# На вход программе подается одна строка.
# Напишите программу, которая определяет сколько раз в строке встречаются символы + и *.
s = input()
print('Символ + встречается', s.count('+'), 'раз')
print('Символ * встречается', s.count('*'), 'раз')

# На вход программе подается одна строка.
# Напишите программу, которая выводит сообщение «Цифра» (без кавычек), если строка содержит цифру.
# В противном случае вывести сообщение «Цифр нет» (без кавычек).
s = input()
flag = 'Цифр нет'
for i in range(10):
    if s.count(str(i)):
        flag = 'Цифра'
        break
print(flag)

# більш компактний варіант розв'язку:
for i in input():
    if i in '01234567890':
        print("Цифра")
        break
else:
    print("Цифр нет")

# На вход программе подается одна строка с буквами русского языка.
# Напишите программу, которая определяет количество гласных и согласных букв.
gol, prig = 0, 0
for i in input().lower():
    if i in 'ауоыиэяюёе':
        gol += 1
    if i in 'бвгджзйклмнпрстфхцчшщ':
        prig += 1
print('Количество гласных букв равно', gol)
print('Количество согласных букв равно', prig)

# На вход подается единственный символ.
# Необходимо определить, является ли данный символ цифрой или нет.
if input() in '0123456789':
    print('yes')
else:
    print('no')

# Измените регистр символа, если он был латинской буквой:
# сделайте его заглавным, если он был строчной буквой и наоборот.
s = input()
if s.upper() == s:
    print(s.lower())
if s.lower() == s:
    print(s.upper())

# ще один варіант:
s = input()
print(s.upper() if 'a' <= s <= 'z' else s.lower())

# більш компактний варіант розв'язку:
print(input().swapcase())

# Необходимо перевести поданный символ в верхний регистр.
# сли символ является строчной буквой латинского алфавита (то есть буквой от a до z),
# выведите вместо него аналогичную заглавную букву, иначе выведите тот же самый символ
s = input()
if 'a' <= s <= 'z':
    print(s.upper())
else:
    print(s)

# На вход программе подается натуральное число, записанное в ДЕСЯТИЧНОЙ СИСТЕМЕ счисления.
# Напишите программу, которая переводит данное число в                          Д В О И Ч Н У Ю  С И С Т Е М У.
n = int(input())
s = str()  # вказали, що s - це рядок
while n > 0:
    s = str(n % 2) + s  # до рядка s(був пустий) кожного разу додаємо 0 або 1 (n % 2)
    n //= 2
print(s)

# На вход программе подается одна строка.
# Напишите программу, которая определяет сколько в ней одинаковых соседних символов.
s, counter = input(), 0
for i in range(len(s) - 1):
    if s[i] == s[i + 1]:
        counter += 1
print(counter)

# більш компактний варіант розв'язку:
s = input()
print(sum(1 for i in range(len(s) - 1) if s[i] == s[i + 1]))
######
s = 'помилоча вже не помилочка'
s = s[:7] + s[-2] + s[7:]
print(s[:])

# На вход программе подается одна строка. Напишите программу, которая выводит:
# общее количество символов в строке;
# исходную строку повторенную 3 раза;
# первый символ строки;
# первые три символа строки;
# последние три символа строки;
# строку в обратном порядке;
# строку с удаленным первым и последним символом.
s = input()
print(len(s), s * 3, s[0], s[:3], s[-3:], s[::-1], s[1:-1], sep='\n')

# На вход программе подается одна строка. Напишите программу, которая выводит:
# третий символ этой строки;
# предпоследний символ этой строки;
# первые пять символов этой строки;
# всю строку, кроме последних двух символов;
# все символы с четными индексами;
# все символы с нечетными индексами;
# все символы в обратном порядке;
# все символы строки через один в обратном порядке, начиная с последнего.
s = input()
print(s[2], s[-2], s[:5], s[:-2], s[::2], s[1::2], s[::-1], s[::-2], sep='\n')

# Сначала выведите третий символ этой строки.
# Во второй строке выведите предпоследний символ этой строки.
# В третьей строке выведите первые пять символов этой строки.
# В четвертой строке выведите всю строку, кроме последних двух символов.
# В пятой строке выведите все символы с четными индексами
# (считая, что индексация начинается с 0, поэтому символы выводятся начиная с первого).
# В шестой строке выведите все символы с нечетными индексами, то есть начиная со второго символа строки.
# В седьмой строке выведите все символы в обратном порядке.
# В восьмой строке выведите все символы строки через один в обратном порядке, начиная с последнего.
# В девятой строке выведите длину данной строки.
s = input()
print(s[2])
print(s[-2])
print(s[:5])
print(s[:-2])
print(s[::2])
print(s[1::2])
print(s[::-1])
print(s[::-2])
print(len(s))

# Дана строка.
# Разрежьте ее на две равные части (если длина строки — четная, а если длина строки нечетная
# то длина первой части должна быть на один символ больше).
# Переставьте эти две части местами, результат запишите в новую строку и выведите на экран.
s = input()
print(s[(len(s) // 2 + len(s) % 2):]+s[:(len(s) - len(s) // 2)])

# На вход программе подается строка текста.
# Напишите программу, которая разрежет ее на две равные части, переставит их местами и выведет на экран.
# Если длина строки нечетная, то длина первой части должна быть на один символ больше.
# abcdef => defabc
# abcdefg => efgabcd
s = input()
print(s[len(s) // 2 + len(s) % 2:] + s[:len(s) - len(s) // 2]) # len(s) % 2 - додає 0 якщо парна і 1 - якщо не парна к-ть

# Дана строка. Удалите из нее все символы, чьи индексы делятся на 3.
s = input()
for i in range(len(s)):
    if i % 3 != 0:
        print(s[i], end='')

# Замена внутри фрагмента
# Дана строка. Замените в этой строке все появления буквы h на букву H, кроме первого и последнего вхождения.
# In the hole in the ground there lived a hobbit >> In the Hole in tHe ground tHere lived a hobbit
s = input()
print(s[:s.find('h')+1]+s[s.find('h') + 1:s.rfind('h')].replace('h', 'H')+s[s.rfind('h'):])

# Удаление символа
# Дана строка. Удалите из этой строки все символы @.
# Bilbo.Baggins@bagend.hobbiton.shire.me >> Bilbo.Bagginsbagend.hobbiton.shire.me
print(input().replace('@', ''))

# Дана строка. Замените в этой строке все цифры 1 на слово one.
print(input().replace('1', 'one'))

# Удаление фрагмента
# Дана строка, в которой буква h встречается минимум два раза (это можGFет быть как маленькая буква h, так и заглавная H).
# Удалите из этой строки первое и последнее вхождение буквы h, а также все символы, находящиеся между ними.
s = input().replace('H', 'h')
print(s[:s.find('h')] + s[s.rfind('h') + 1:])



                                    # П І Д Р А Х У Н О К  С И М В О Л І В :
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',
# то есть группы одинаковых символов исходной строки заменяются на этот символ
# и количество его повторений в этой позиции строки.
s, cnt = input() + '0', 1
# '0' – додаємо лишній символ щоб опрацьовувало останній
for i in range(len(s) - 1):
    if s[i] == s[i + 1]:
        cnt += 1 # рахує однакові символи
    else:
        print(s[i], cnt, sep='', end='')
        cnt = 1 # скидає лічильник до одиниці, коли символ відрізняється

# Даны две строки. Определите, является ли первая строка подстрокой второй строки.
# На вход подается 2 строки длины не более 10000, состоящие только из маленьких букв латинского алфавита.
# Необходимо вывести  слово yes, если первая строка является подстрокой второй строки, или слово no в противном случае.
t, s = input(), input()
if s.count(t):
    print('yes')
else:
    print('no')

# На вход программе подается строка.
# Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.
s = input()
count = int()
for i in s:
    if 'a' <= i <= 'z':
        count += 1
print(count)

# На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом.
# Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.
# Программа должна вывести «YES» если имя и фамилия начинаются с заглавной буквы и «NO» в противном случае
s = input()
print('YES' if s.title() == s else 'NO')

# В первой строке подаётся число n – количество сообщений, в последующих n строках вводятся строки,
# содержащие латинские строчные буквы и цифры.
# Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.
# Числа 11 необязательно должны быть разделены другими символами,
# нужно подсчитать вхождение последовательности символов "11",
# т.е. например в строке "111" содержится одна такая последовательность, в то время как в "1111" их уже две.
# 3
# 11helpme11jim11
# aveng11ers1141414atta11ck
# k1lg0re11111l
# >> 2
n, k = int(input()), int()
for i in range(n):
    if input().count('11') >= 3:
        k += 1
print(k)

# На вход программе подается строка текста.
# Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.
print('YES' if input().endswith(('.com', '.ru')) else 'NO')

# На вход программе подается строка текста.
# Если в этой строке буква «f» встречается только один раз, выведите её индекс.
# Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке,
# разделенных символом пробела.
# Если буква «f» в данной строке не встречается, следует вывести «NO».

s = input()
if s.count('f') == 1:                       # якщо тільки одна штука, то s.find('f') == s.rfind('f')
    print(s.find('f'))
elif s.count('f') > 1:
    print(s.find('f'), s.rfind('f'))
else:                                       # якщо немає, то s.count('f') == -1
    print('NO')

# Дана строка. Если в этой строке буква f встречается только один раз, выведите её индекс.
# Если она встречается два и более раз, выведите индекс её первого и последнего появления.
# Если буква f в данной строке не встречается, ничего не выводите.
# При решении этой задачи нельзя использовать метод count и циклы.
s = input()
if s.find('f') != s.rfind('f'):
    print(s.find('f'), s.rfind('f'))
elif s.find('f') == s.rfind('f') and s.find('f') != -1:
    print(s.find('f'))

# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза.
# Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h»,
# а также все символы, находящиеся между ними.
s = input()
print(s[:s.find('h')] + s[s.rfind('h') + 1:])

# Дана строка. Найдите в этой строке второе вхождение буквы f, и выведите индекс этого вхождения.
# Если буква f в данной строке встречается только один раз, выведите число -1,
# а если не встречается ни разу, выведите число -2.
# При решении этой задачи нельзя использовать метод count.
s = input()
if s.find('f') == -1:
    print(-2)
elif s.find('f') == s.rfind('f'):
    print(-1)
else:
    t = s[:s.find('f')] + ' ' + s[s.find('f') + 1:]
    print(t.find('f'))

# Дана строка. Получите новую строку, вставив между двумя символами исходной строки символ *.
# Выведите полученную строку.
# Python >> P*y*t*h*o*n
s = input()
for i in range(len(s)):
    print(s[i], end='')
    if i != len(s) - 1:
        print('*', end='')

# більш компактний варіант розв'язку:
print('*'.join(input()))

# більш компактний варіант розв'язку:
print(input().replace('', '*').strip('*'))

# більш компактний варіант розв'язку:
print(*input(), sep='*')

# На вход программе подается строка текста.
# Текст может содержать строчные и заглавные буквы английского и русского алфавита, а также цифры.
# Программа должна вывести символ, который появляется наиболее часто.
# 1. Если таких символов несколько, следует вывести последний по порядку символ.
# 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.
s = input()[::-1]
counter = 0
dig = str()
for i in range(len(s)):
    if s.count(s[i]) > counter:
        counter = s.count(s[i])
        dig = s[i]
print(dig)

# інший варіант розв'язку:
s = input()
c, a = 0, 0
for i in s:
    if s.count(i) >= c:
        c = s.count(i)
        a = i
print(a)

# більш компактний варіант розв'язку:
s, sim = input(), 'a'
for i in s:
    if s.count(i) >= s.count(sim):
        sim = i
print(sim)

# На вход программе подается строка текста.
# Напишите программу, которая подсчитывает количество цифр в данной строке.
s, c = input(), 0
for i in s:
    if '0' <= i <= '9':
        c += 1
print(c)

# інший варіант розв'язку:
n = input()
count = 0
for i in range(10):
    count += n.count(str(i))
print(count)

# інший варіант розв'язку:
s = input()
k = 0
for c in '1234567890':
  k += s.count(c)
print(k)

# # більш компактний варіант розв'язку:
n = input()
print(sum(n.count(i) for i in '1234567890'))

# Дополните приведенный код, используя форматирование строк с помощью метода FORMAT, так чтобы он вывел текст:
# «In 2010, someone paid 10k Bitcoin for two pizzas.» (без кавычек).
s = 'In {0}, someone paid {1} {2} for two pizzas.'.format('2010', '10k', 'Bitcoin')
print(s)

# або:                                                                                          FORMAT:
a = '2010'
b = '10k'
c = 'Bitcoin'
print(f'In {a}, someone paid {b} {c} for two pizzas.')

name1 = 'Семен Семенович Горбунков'
balans1 = 3
name2 = 'Гєша'
balans2 = 100
print('Дорогой {00}, баланс вашего лицевого счета составляет: {01} руб.'.format(name1, str(balans1).rjust(3, '0')))
print('Дорогой {0}, баланс вашего лицевого счета составляет: {1} руб.'.format(name2, str(balans2).rjust(3, '0')))
print('Дорогой {a}, сегодня к вам на день рождения приедет {b} и подарит {c} рублей'.format(b=name2, a=name1, c=balans2))

# Программа запрашивает у пользователя курс доллара - вещественное число,  и также количество долларов(целое число),
# которое пользователь хочет приобрести. В итоге программа должна вывести следующее сообщение:
# "Current dollar rate is <курс доллара>. You want buy <количество долларов> dollars
# You must pay <стоимость>"
rate = float(input())
dlrs = int(input())
pay = rate * dlrs
print(f'Current dollar rate is {rate}. You want buy {dlrs} dollars\nYou must pay {pay}')

# Давайте при помощи F-строк выведем информацию о трех видах деления, которые мы с вами изучили ранее:
# обычное деление, целочисленное и деление по остатку.
# 11 / 5 = 2.2
# 11 // 5 = 2
# 11 % 5 = 1
a, b = int(input()), int(input())
print(f'{a} / {b} = {a / b}\n{a} // {b} = {a // b}\n{a} % {b} = {a % b}')

# На вход программе подаются два числа a и b.
# Напишите программу, которая для каждого кодового значения в диапазоне от a до b (включительно),
# выводит соответствующий ему символ из таблицы символов Unicode.
for i in range(int(input()), int(input())+1):
    print(chr(i), end=' ')

# На вход программе подается строка текста.
# Напишите программу, которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.
for i in input():
    print(ord(i), end=' ')

#                                                                                           ШИФР ЦЕЗАРЯ
# Шифр Цезаря — это вид шифра подстановки, в котором каждый символ в открытом тексте заменяется символом,
# находящимся на некотором постоянном числе позиций левее или правее него в алфавите.
# В первой строке дается число n, (1 ≤ n ≤ 25)
# Напишите программу для декодирования этого шифра
k = int(input())
s = input()
for i in range(len(s)):
    n = ord(s[i]) - k
    if n < 97:
        n = 26 + n
    print(chr(n), end='')

# інший варіант:
n = int(input())
a = input()
for i in a:
    k = ord(i) - n
    if k < 97:
        k = k + 26
    print(chr(k), end='')

# більш компактний варіант:
n, s = int(input()), input()
a = 'abcdefghijklmnopqrstuvwxyz'
for i in s:
    print(a[a.find(i) - n], end='')


# На вход программе подается строка текста.
# Напишите программу, которая удаляет из нее все символы с индексами кратными 3,
# то есть символы с индексами 0, 3, 6, ....
s = input()
for i in range(len(s)):
    if i % 3 != 0:
        print(s[i], end='')


s = input()
if s.count('f') <= 1:
   print(s.count('f') - 2)
else:
   print(s.replace('f', '0', 1).find('f'))
#
print(s.count('f') - 2 if s.count('f') <= 1 else s.replace('f', '0', 1).find('f'))

# На вход программе подается строка текста в которой буква «h» встречается как минимум два раза.
# Напишите программу, которая возвращает исходную строку и переворачивает последовательность символов,
# заключенную между первым и последним вхождением буквы «h».
# abch12345h
# >> abch54321h
s = input()
begin_h = s[:s.find('h') + 1]  # спочатку до h
middle_revers = s[s.rfind('h') - 1:s.find('h'):-1]  # символи між h-h перевернуті
h_end = s[s.rfind('h'):]  # з h до кінця
print(begin_h + middle_revers + h_end) # це str тому '+'
# або в один рядок:
print(s[:s.find('h') + 1] + s[s.rfind('h') - 1:s.find('h'):-1] + s[s.rfind('h'):])

#######################################################################################################################
#################################################### С П И С К И: #####################################################
#######################################################################################################################

#На вход программе подается одно число n.
# Напишите программу, которая выводит список [1, 2, 3, ..., n].
n = int(input())
print(list(range(1, n+1)))

# На вход программе подается одно число n.
# Напишите программу, которая выводит список, состоящий из n букв
# английского алфавита ['a', 'b', 'c', ...] в нижнем регистре.
a = 'abcdefghijklmnopqrstuvwxyz'
print(list(a[:int(input())]))

##################################################################### Б У Л Ь Б А Ш К О В Е   С О Р Т У В А Н Н Я:
def sort(nums):
    for i in range(len(nums) - 1, 0, -1):
        for j in range(i):
            if nums[j] > nums[j + 1]:
                temp = nums[j]
                nums[j] = nums[j + 1]
                nums[j + 1] = temp
nums = [5, 3, 8, 6, 7, 2]
sort(nums)
print(nums)

# Программа получает на вход список из целых чисел. Ваша задача найти сумму списка
print(sum(list(map(int, input().split()))))

# Дополните приведенный код, чтобы он:
# Вывел длину списка;
# Вывел последний элемент списка;
# Вывел список в обратном порядке (вспоминаем срезы);
# Вывел YES если список содержит числа 5 и 17, и NO в противном случае;
# Вывел список с удаленным первым и последним элементами.
# Примечание. Каждый вывод осуществлять с новой строки.
numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
print(len(numbers))
print(numbers[-1])
print(numbers[::-1])
print('YES' if '5, 17' in numbers else 'NO')
del numbers[0]
del numbers[-1]
print(numbers)

# На вход программе подается натуральное число n, а затем n строк.
# Напишите программу, которая создает из указанных строк список и выводит его.
# На вход программе подаются натуральное число n, а затем n строк, каждая на отдельной строке.
s = []
for _ in range(int(input())):
    s.append(input())
print(s)

# більш компактний варіант розв'язку:
print([input() for i in range(int(input()))])

# Напишите программу, выводящую следующий список:
# ['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
s = []
al = 'abcdefghijklmnopqrstuvwxyz'
for i in range(len(al)):
    s.append(al[i] * int(i + 1))
print(s)

# більш компактний розв'язок:
print([i * chr(i + 96) for i in range(1, 27)])

# Список кубов
# На вход программе подается натуральное число n, а затем n целых чисел.
# Напишите программу, которая создает из указанных чисел список их кубов.
s = []
for _ in range(int(input())):
    s.append(int(input()) ** 3)
print(s)

# На вход программе подается натуральное число n
# Напишите программу, которая создает список состоящий из делителей введенного числа.
n = int(input())
s =[]
for i in range(1, n + 1):
    if n % i == 0:
        s.append(i)
print(s)

# На вход программе подается натуральное число n, а затем n целых чисел.
# Напишите программу, которая создает из указанных чисел список,
# затем удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.
s = []
for _ in range(int(input())):
    s.append(int(input()))
del s[1::2]
print(s)

# На вход программе подается натуральное число n, а затем n строк.
# Напишите программу, которая создает список из символов всех строк, а затем выводит его.
# 3
# abc
# def
# ghi
# >> ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
l = str()
for _ in range(int(input())):
    l = l + str(input())
print(list(l))

# інший варіант розв'язку:


# На вход программе подается натуральное число n и n строк, а затем число k.
# Напишите программу, которая выводит k-ую букву из введенных строк на одной строке без пробелов.
# На вход программе подается натуральное число n,  далее n строк, каждая на отдельной строке.
# В конце вводится натуральное число k – номер буквы (нумерация начинается с единицы).
# Если некоторые строки слишком короткие, и в них нет символа с заданным номером,
# то такие строки при выводе нужно игнорировать.
s = []
for _ in range(int(input())):
    s.append(input())
k = int(input())
for i in range(len(s)):
    if len(s[i]) >= k:
        print(s[i][k - 1], end='')
    else:
        continue

# Символы всех строк
# На вход программе подается натуральное число n, а затем n строк.
# Напишите программу, которая создает список из символов всех строк, а затем выводит его.
s = []
for _ in range(int(input())):
    s.extend(input())
print(s)

# Суммы двух
# На вход программе подается натуральное число n (n≥2), а затем n целых чисел.
# Напишите программу, которая создает из указанных чисел список, состоящий из сумм соседних чисел
# (0 и 1, 1 и 2, 2 и 3 и т.д.).
s, t = [], []
for i in range(1, int(input()) + 1):
    s.append(int(input()))
for j in range(i - 1):
    t.append(s[j] + s[j+1])
print(t)

# ополните приведенный код, так чтобы он вывел сумму квадратов элементов списка n.
n = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
s = []
for i in n:
    s.append(i ** 2)
print(sum(s))

# На вход программе подается натуральное число n, а затем n целых чисел.
# Напишите программу, которая для каждого введенного числа xx выводит значение функции f(x) = x^2 + 2x + 1,
# каждое на отдельной строке.
s = [int(input()) for _ in range(int(input()))]
print(*s, sep='\n')
print()
for i in s:
    print(i ** 2 + 2 * i + 1)

# На вход программе подается натуральное число n, а затем n различных натуральных чисел.
# Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел,
# а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.
s = [int(input()) for _ in range(int(input()))]
del s[s.index(min(s))]
del s[s.index(max(s))]
print(*s, sep='\n')

# інший варіант розв'язку:
s = [int(input()) for _ in range(int(input()))]
s.remove(min(s))
s.remove(max(s))
print(*s, sep='\n')

# Программа получает на вход список из целых чисел. Подсчитайте сколько раз в нем присутствует число 999
s = list(map(int, input().split()))
print(s.count(999))

# Вводится два слова через пробел. Ваша задача преобразовать данную фразу таким образом,
# чтобы все буквы стали заглавными и между буквами в каждом слове появились дефисы
print(input().upper().replace('', '-')[1:-1].replace('- -', ' '))

# інший варіант розв'язку:
print(*('-'.join(s) for s in input().upper().split()))

# Напишите программу, которая выводит слова введённой строки
# (части, разделённые символами пустого пространства) в столбик.
# Нужно обойтись только методов split у списков и методом join у строк, в программе должен быть всего один вызов print.
print(*(list(map(str, input().split()))), sep='\n')

# інший варіант розв'язку:
list(map(str, input().split()))

# Инициалы
# Ваша программа получает на вход строку, содержащую имя, отчество и фамилию человека
# Вам необходимо вывести фамилию и инициалы, как в примерах ниже
# Марина Денисовна Климова
# Климова М.Д.
s = list(input().split())
print(s[-1], s[0][0] + '.' + s[1][0] + '.')

# інший варіант розв'язку:
l = input().split()
print(f'{l[-1]} {l[0][0]}.{l[1][0]}.')

# Без дубликатов
# На вход программе подается натуральное число n, а затем n строк.
# Напишите программу, которая выводит только уникальные строки, в том же порядке, в котором они были введены.
s = [input() for _ in range(int(input()))]
t = []
for i in range(len(s)):
    if s[i] not in t:
        t.append(s[i])
print(*t, sep='\n')

# інший варіант розв'язку:
s = [input() for _ in range(int(input()))]
print(*[s[i] for i in range(len(s)) if s[:i].count(s[i]) == 0], sep="\n")

# Напишите программу, которая выводит слова введённой строки
# (части, разделённые символами пустого пространства) в столбик.
# Нужно обойтись только методом split у списков и методом join у строк
# в программе должен быть всего один вызов print.
# Буря мглою небо кроет
# >>
# Буря
# мглою
# небо
# кроет
print(*(list(map(str, input().split()))), sep='\n')
# або:
print(*(s for s in input().split()), sep='\n')

# більш компактний варіант:
print('\n'.join(input().split()))

# Напишите программу, на вход которой подается одна строка с целыми числами.
# Программа должна вывести сумму этих чисел.
# Используйте метод split строки.

print(sum(map(int, input().split())))

# або:
print(sum(int(i) for i in input().split()))

# Google search - 1
# На вход программе подается натуральное число n, затем n строк, затем еще одна строка — поисковый запрос.
# Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.
# Поиск не должен быть чувствителен к регистру символов.
s = [input() for _ in range(int(input()))]
f = input()
for i in range(len(s)):
    if f.lower() in s[i].lower():
        print(s[i])

# більш компактний варіант розв'язку:
s = [input() for _ in range(int(input()))]
f = input().lower()
for i in s:
    if f in i.lower():
        print(i)

# Google search - 2
# На вход программе подается натуральное число n, затем n строк, затем число k — количество поисковых запросов,
# затем k строк — поисковые запросы.
# Напишите программу, которая выводит все введенные строки, в которых встречаются все поисковые запросы.
# Поиск не должен быть чувствителен к регистру символов.
s = [input() for _ in range(int(input()))]
t = [input() for _ in range(int(input()))]
k = []
for i in s:
    c = 0
    for j in t:
        if j.lower() in i.lower():
            c += 1
        if len(t) == c:
            k.append(i)
print(*k, sep='\n')

# більш компактний варіант розв'язку:
s = [input() for _ in range(int(input()))]
t = [input() for _ in range(int(input()))]
for i in s:
    for j in t:
        if j.lower() not in i.lower():
            break
    else:
        print(i)

# Negatives, Zeros and Positives
# На вход программе подается натуральное число n, а затем nn целых чисел.
# Напишите программу, которая сначала выводит все отрицательные числа, затем нули,
# а затем все положительные числа, каждое на отдельной строке.
# Числа должны быть выведены в том же порядке, в котором они были введены.
mn, zr, mx = [], [], []
for i in [int(input()) for _ in range(int(input()))]:
    if i < 0:
        mn.append(i)
    elif i == 0:
        zr.append(i)
    else:
        mx.append(i)
print(*(mn + zr + mx), sep='\n')

# більш компактний варіант розв'язку:
n = [int(input()) for _ in range(int(input()))]
[print(i) for i in n if i < 0]
[print(i) for i in n if i == 0]
[print(i) for i in n if i > 0]

# На вход программе подается строка текста.
# Напишите программу, которая выводит слова введенной строки в столбик.
# У лукоморья дуб зеленый златая цепь на дубе том
# >>
# У
# лукоморья
# дуб
# зеленый
# златая
# цепь
# на
# дубе
# том
print(*(input().split()), sep='\n')

# На вход программе подается строка текста, содержащая имя, отчество и фамилию человека.
# Напишите программу, которая выводит инициалы человека.
[print(i[0], end='.') for i in input().split()]

# тобто:
s = input()
print(s)
t = s.split()
print(t)
[print(i[0], end='.') for i in t]

# В операционной системе Windows полное имя файла состоит из буквы диска,
# после которого ставится двоеточие и символ  "\",  затем через такой же символ перечисляются подкаталоги (папки),
# в которых находится файл, в конце пишется имя файла (C:\Windows\System32\calc.exe).
# На вход программе подается одна строка с корректным именем файла в операционной системе Windows.
# Напишите программу, которая разбирает строку на части, разделенные символом "\".
# Каждую часть вывести в отдельной строке.
print('\n'.join(input().split('\\')))

# або:
print(*(input().split('\\')), sep='\n')

# Диаграмма
# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, которая по заданным числам строит столбчатую диаграмму.
# 5 3 1 7 10 2
# +++++
# +++
# +
# +++++++
# ++++++++++
# ++
for i in map(int, input().split()):
    print('+' * i)

# Корректный ip-адрес
# На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой.
# Напишите программу, которая определяет (YES/NO) является ли введенная строка текста корректным ip-адресом.
# ip-адрес является корректным, если все 4 числа находятся в диапазоне от 0 до 255 включительно.
flag = 'YES'
for i in input().split('.'):
    if not 0 <= int(i) <= 255:
        flag = 'NO'
print(flag)

# більш компактний варіант розв'язку:
print(('NO', 'YES')[sum(0 <= int(i) <= 255 for i in input().split('.')) == 4])

# Добавь разделитель
# На вход программе подается строка текста и строка разделитель.
# Напишите программу, которая вставляет указанный разделитель между каждым символом введенной строки текста.
# 1234567
# *
# >> 1*2*3*4*5*6*7
s = input()
print(input().join(s))

# інший варіант розв'язку:
print(*list(input()), sep=input())

# Все сразу 2
# Заменил второй элемент списка на 17;
# Добавил числа 4, 5 и 6 в конец списка;
# Удалил первый элемент списка;
# Удвоил список;
# Вставил число 25 по индексу 3;
# Вывел список, с помощью функции print().
n = [8, 9, 10, 11]
n[1] = 17
n.extend([4, 5, 6])
del n[0]
n = n * 2
n.insert(3, 25)
print(n)

# Напишите программу, на вход которой подаётся список чисел одной строкой.
# Программа должна для каждого элемента этого списка вывести сумму двух его соседей.
# Для элементов списка, являющихся крайними, одним из соседей считается элемент,
# находящий на противоположном конце этого списка.
# Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
# Если на вход пришло только одно число, надо вывести его же.
# Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.
s = [int(i) for i in input().split()]
k = []
if len(s) == 1:
    print(*s)
else:
    for i in range(len(s) - 1):
        k.append(s[i - 1] + s[i + 1])
    k.append(s[-2] + s[0])
    print(*k)

# ПРОГРАММА ВИДАЛЯЄ ДУБЛІКАТИ ЗІ СПИСКУ:
# [4, 8, 0, 3, 4, 2, 0, 0, 3] >> 0 2 3 4 8
s = input().split()
k = []
s.sort()
for i in range(len(s)):
    if s.count(s[i]) == 1:
        k.append(s[i])
    else:
        s[i] = '-'
print(*k)

# Необходимо выделить каждое второе слово и представить результат ввиде упорядоченого списка
t = '''Куда ты скачешь гордый конь,
       И где опустишь ты копыта?
       О мощный властелин судьбы!
       Не так лы ты над самой бездной,
       На высоте уздой железной
       Кацапов поднял на дыбы?'''.split()
print(sorted(list(filter(lambda x: t.index(x) % 2, t))))

# більш компактний варіант:                                                                     S E T ()
print(*(set(input().split())))

# Количество артиклей
# На вход программе подается строка, содержащая английский текст.
# Напишите программу, которая подсчитывает общее количество артиклей: 'a', 'an', 'the'.
# Артикли могут начинаться с заглавной буквы 'A', 'An', 'The'.
s = input().lower().split()
print('Общее количество артиклей:', s.count('a') + s.count('an') + s.count('the'))

# Переставить min и max
# На вход программе подается строка текста, содержащая различные натуральные числа.
# Из данной строки формируется список чисел. Напишите программу,
# которая меняет местами минимальный и максимальный элемент этого списка.
s = [int(i) for i in input().split()]
i = s.index(max(s))
j = s.index(min(s))
s[i], s[j] = s[j], s[i]
print(*s)

# Сортировка чисел
# На вход программе подается строка текста, содержащая целые числа.
# Из данной строки формируется список чисел.
# Напишите программу, которая сортирует и выводит данный список сначала по возрастанию, а затем по убыванию.
s = [int(i) for i in input().split()]
s.sort()
print(*s)
s.sort(reverse=True)
print(*s)

# або:
s = [int(i) for i in input().split()]
print(*sorted(s))
print(*sorted(s, reverse=True))

# Количество совпадающих пар
# На вход программе подается строка текста, содержащая натуральные числа.
# Из данной строки формируется список чисел
# Напишите программу, которая подсчитывает, сколько в полученном списке пар элементов, равных друг другу.
# Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
# 3 3 3 3 3
# >> 10
s = input().split()
count = 0
for i in range(len(s)):
    for j in range(i + 1, len(s)):
        if s[j] == s[i]:
            count += 1
print(count)

# більш компактний варіант:
s = input().split()
print(sum(s.count(i) - 1 for i in s) // 2)

# Дополните приведенный код, используя списочное выражение, так чтобы получить новый список, содержащий:
# -  строки исходного списка с удаленным первым символом.
# - длины строк исходного списка.
# - только слова длиной не менее пяти символов (включительно).
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif',
            'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda',
            'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
print([i[1:] for i in keywords])
print([len(i) for i in keywords])
print([i for i in keywords if len(i) >= 5])

# П О Л І Н Д Р О М:
# Дополните приведенный код, используя списочное выражение, так
# чтобы получить список всех чисел палиндромов от 100100 до 10001000.
palindromes = [i for i in range(100, 1001) if str(i) == str(i)[::-1]]
print(palindromes)

# більш швидший код:
palindromes = [i for i in range(100, 1001) if i % 10 == i // 100]

#                                                                               Ш В И Д К І С Т Ь  К О Д А :
import timeit
code = """
КОД
"""
print(timeit.timeit(code, number=100)/100, 'seconds')  # провести 100 циклів потім / 100, щоб отримати час на один цикл

# На вход программе подается натуральное число n.
# Напишите программу, использующую списочное выражение, которая создает список содержащий квадраты чисел от 11 до n,
# а затем выводит его элементы построчно, то есть каждый на отдельной строке.
n = int(input())
s = [i * i for i in range(1, n + 1)]
print(*s, sep='\n')

# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, использующую списочное выражение, которая выведет кубы указанных чисел также на одной строке.
print(*[int(i) ** 3 for i in input().split()])

# В одну строку 1
# На вход программе подается строка текста, содержащая слова.
# Напишите программу, которая выводит слова введенной строки в столбик.
print(*input().split(), sep='\n')

# В одну строку 2
# На вход программе подается строка текста. Напишите программу,
# использующую списочное выражение, которая выводит все цифровые символы данной строки.
print(*(i for i in input() if i in '0123456789'), sep='')

# інший варіант розв'язку:
print(*(i for i in input() if i.isdigit()), sep="")

# В одну строку 3
# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, использующую списочное выражение,
# которая выведет квадраты четных чисел, которые не оканчиваются на цифру 4.
n = input().split()
print(*(int(i) ** 2 for i in n if int(i) % 2 == 0 and not int(i) ** 2 % 10 == 4))

# інший варіант розв'язку:
print(*(int(i) ** 2 for i in input().split() if i[-1] in "046"))

# Поиск минимума в списке:
# 5 8 4 3 5 7
# >> 3
n = [int(i) for i in input().split()]
t = 9
for i in n:
    if i < t:
        t = i
print(t)

n = [int(i) for i in input().split()]
m = n[0]
for i in n:
    if m > i:
        m = i
print(m)

# Напишите программу, которая принимает на вход список чисел в одной строке и
# выводит на экран в одну строку значения, которые встречаются в нём более одного раза.
# Для решения задачи может пригодиться метод sort списка.
# 4 8 0 3 4 2 0 3
# >> 0 3 4

s = [int(i) for i in input().split()]
s.sort()
t = []
for i in s:
    if s.count(i) > 1:
        t.append(i)
print(*set(t))

# інший варіант розв'язку:
a = input().split()
a.sort()
t = []
for i in range(len(a)):
    if a.count(a[i]) > 1 and a[i] not in t:
        t.append(a[i])
print(*t)

# Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор,
# пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
# Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0,
# после этого считывание продолжать не нужно.
# В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем,
# что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то,
# что остались ещё не прочитанные значения.
n = int(input())
s, q = n, n * n
while s != 0:
    n = int(input())
    q += n * n
    s += n
print(q)

# більш компактний варіант розв'язку:
s = [int(input())]
while sum(s) != 0:
    s.append(int(input()))
print(sum(i * i for i in s)

# Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ...
# (число повторяется столько раз, чему равно).
# На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна
# отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
# Например, если n = 7 >> 1 2 2 3 3 3 4
n, s = int(input()), []
for i in range(1, n + 1):
    s += [i] * i
print(*s[:n])

# варіант розв'язку через append():
n = int(input())
i = 0
s = []
while len(s) < n:
    if s.count(i) < i:
        s.append(i)
    else:
        i += 1
print(*s)

# ######################################################## Б У Л Ь Б А Ш К О В Е  С О Р Т У В А Н Н Я:
a = [1, 5, 6, 41, 9, 25, 1, 32, 74, 7, 9, 6, 4, 3, 20]
n = len(a)
f = False
for i in range(n - 1):
    for j in range(n - 1 - i):
        if a[j] > a[j + 1]:
            a[j], a[j + 1] = a[j + 1], a[j]
            f = False
        else:
            f = True
        if f:
            break
print('Бульбашкове сортування (оптимізоване):', a)

# ######################################################## С О Р Т У В А Н Н Я  В И Б О Р О М:






# На вход программе подается четное число n, \, n \ge 2n,n≥2.
# Напишите программу, которая выводит список четных чисел
#  [2, 4, 6, ..., n]
a = []
for i in range(2, int(input()) + 1, 2):
    a.append(i)
print(a)

# Сумма двух списков
# На вход программе подаются две строки текста, содержащие целые числа.
# Из данных строк формируются списки чисел L и M. Напишите программу, которая создает третий список,
# элементами которого являются суммы соответствующих элементов списков L и M.
# Далее программа должна вывести каждый элемент полученного списка на одной строке через 1 символ пробел.
# Количество чисел в обеих строках одинаковое.
# 1 1 1 1 1 1
# 9 9 9 9 9 9
# >> 10 10 10 10 10 10
n = [int(i) for i in input().split()]
m = [int(i) for i in input().split()]
for i in range(len(n)):
    print(n[i] + m[i], end=' ')

# інший варіант розв'язку:
n = [int(i) for i in input().split()]
m = [int(i) for i in input().split()]
print(*[n[i] + m[i] for i in range(len(n))])

# інший варіант розв'язку:
n = [int(i) for i in input().split()]
m = [int(i) for i in input().split()]
print(*[x + y for x, y in zip(n, m)])

# Сумма чисел
# На вход программе подается строка текста, содержащая натуральные числа.
# Напишите программу, которая вставляет между каждым числом знак +, а затем вычисляет сумму полученных чисел.
# 2 5 11 33 55
# >> 2+5+11+33+55=106
s = [int(i) for i in input().split()]
print(*s, sep='+',end='=')
print((sum(s)))

# інший варіант розв'язку:
l = input().split()
print('+'.join(l), '=', sum(int(_) for _ in l), sep= '')

# ТИМУР И ЕГО ЧИСЛА
# Тимур загадал число от 1 до n.
# За какое наименьшее количество вопросов (на которые Тимур отвечает "больше" или "меньше")
# Руслан может гарантированно угадать число Тимура?
# На вход программе подается натуральное число n.
# Программа должна вывести наименьшее количество вопросов, которых гарантированно хватит Руслану,
# чтобы угадать число Тимура.
# 8 >> 3
# 20 >> 5
# 100 >> 7
s = [i for i in range(1, int(input()) + 1)]
c = 0
while len(s) != 1:
    c += 1
    s = s[:(len(s) + 1) // 2]
print(c)

# або так:
from math import log
print(int(log(n, 2)+1))

# Валидный номер
# На вход программе подается строка текста.
# Напишите программу, которая определяет является ли введенная строка корректным телефонным номером.
# Строка текста является корректным телефонным номером если она имеет формат:
# abc-def-hijk
# или
# 7-abc-def-hijk
# где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.
# На вход программе подается строка текста.
# Программа должна вывести «YES» если строка является корректным телефонным номером и «NO» в противном случае.
# Телефонный номер должен содержать только цифры и символ -, а количество цифр в каждой группе должны быть правильным.
n = input().split('-')
flag = 'NO'
if len(n) == 3 or len(n) == 4 and n[0] == '7':
    for i in n:
        if i.isdigit() and len(n[-1]) == 4 and len(n[-2]) == 3 and len(n[-3]) == 3:
            flag = 'YES'
        else:
            flag = 'NO'
            break
print(flag)

# інший варіант розв'язку:
n = input().split("-")
c = [len(i) for i in n]
if c == [3, 3, 4] and ''.join(n).isdigit():
    print("YES")
elif c == [1, 3, 3, 4] and ''.join(n).isdigit() and n[0] == '7':
    print("YES")
else:
    print("NO")

# Самое длинное слово
# На вход программе подается строка текста.
# Напишите программу, использующую списочное выражение, которая находит длину самого длинного слова.
s = input().split()
l = 0
for i in s:
    if len(i) > l:
        l = len(i)
print(l)

# більш компактний варіант розв'язку:
print(max([len(i) for i in input().split()]))

# На вход программе подается строка текста.
# Напишите программу, использующую списочное выражение, которая
# преобразует каждое слово введенного текста в "молодежный жаргон" по следующему правилу:
# первая буква каждого слова удаляется и ставится в конец слова;
# затем в конец слова добавляется слог "ки".
# проспал почти всю ночь
# >> роспалпки очтипки сювки очьнки
s = input().split()
t = []
for i in s:
    t.append(i[1:] + i[0] + 'ки')
print(*t)

# більш компактний варіант розв'язку:
print(*[i[1:] + i[0] + "ки" for i in input().split()])

# Вывести четные элементы
# Дан массив, состоящий из целых чисел.
# Напишите программу, которая выводит те элементы массива, которые являются чётными числами.
# Сначала задано число N — количество элементов в массиве (1 ≤ N ≤ 100).
# Далее через пробел записаны N чисел — элементы массива. Массив состоит из целых чисел.
n = int(input())
s = input().split()
for i in s:
    if int(i) % 2 == 0:
        print(i, end=' ')

# більш компактний варіант розв'язку:
input()
print(*[i for i in input().split() if not int(n) % 2])

# Количество положительных элементов
# Дан массив, состоящий из целых чисел.
# Напишите программу, которая подсчитывает количество положительных чисел среди элементов массива.
input()
c = 0
s = input().split()
for i in s:
    if int(i) > 0:
        c += 1
print(c)

# більш компактний варіант розв'язку:
c = 0
input()
for i in input().split():
    c += int(i) > 0
print(c)

# Количество элементов, больших предыдущего
# Дан массив, состоящий из целых чисел.
# Напишите программу, которая подсчитает количество элементов массива,
# больших предыдущего (элемента с предыдущим номером).
n = int(input())
s = [int(i) for i in input().split()]
c = 0
for i in range(len(s) - 1):
    if s[i] < s[i + 1]:
        c += 1
print(c)

# Количество различных элементов в монотонном массиве
# Дан массив, состоящий из целых чисел. Известно, что числа упорядочены по неубыванию (то есть каждый следующий
# элемент не меньше предыдущего).Напишите программу, которая определит количество различных чисел в этом массиве.
# Сначала задано число N — количество элементов в массиве (1 ≤ N ≤ 100).
# Далее через пробел записаны N чисел — элементы массива. Массив состоит из целых чисел
# Необходимо вывести единственное число - количество различных чисел в массиве.
# 5
# 1 1 1 1 1 4 9 9
# >> 3
n = int(input())
s = [int(i) for i in input().split()]
t = []
for i in s:
    if i not in t:
        t.append(i)
print(len(t))

# більш компактний варіант розв'язку через set:
input()
print(len(set(input().split())))




# Есть ли два элемента с одинаковыми знаками
# Дан массив, состоящий из целых чисел.
# Напишите программу, которая определяет, есть ли в массиве пара соседних элементов с одинаковыми знаками.
n = int(input())
s = [int(i) for i in input().split()]
f = 'NO'
for i in range(len(s) - 1):
    if (s[i] * s[i + 1]) > 0:
        f = 'YES'
        break
print(f)

# Дана строка, содержащая пробелы. Найдите в ней самое длинное слово, выведите  это слово и его длину.
# Если таких слов несколько, выведите первое из них.
# Задана одна строка, содержащая пробелы. Слова разделены ровно одним пробелом.
# Пробелы в начале и конце строки допускаются.
# Необходимо вывести самое длинное слово в строке и его длину.
s = ['one', 'two', 'three', 'four', 'five', 'six']#input().split()
print(s)
print(max(s))
maxi = 1
w = str()
for i in range(len(s) - 1):
    if len(s[i]) > maxi:
        maxi = len(s[i])
        w = s[i]
print(w, maxi, sep='\n')

# інший варіант розв'язку:
s = input().split()
print(max(s, key=len), len(max(s, key=len)), sep='\n')

# Дана строка, Вам требуется преобразовать все идущие подряд пробелы в один.
# Если пробелы есть в начале и в конце строки - их нужно убрать.
s = input()
while s.count('  ') != 0:
    s = s.replace('  ', ' ')
print(s)

# більш компактний варіант розв'язку:
print(' '.join(input().split()))

# більш компактний варіант розв'язку:
print(*input().split())

# Переставить соседние элементы
# Напишите программу, которая переставляет соседние элементы массива
# (1-й элемент поменять с 2-м, 3-й с 4-м и т.д. Если элементов нечетное число,
# то последний элемент остается на своем месте).
# 6
# 4 5 3 4 2 3
# >> 5 4 4 3 3 2
n = int(input())
s = [int(i) for i in input().split()]
for i in range(0, n - 1, 2):
    print(s[i + 1], s[i], end=' ')
if n % 2 != 0:
    print(s[-1])

# більш компактний варіант розв'язку:
input()
sp = input().split()
while len(sp) > 1:
    print(sp.pop(1), sp.pop(0), end=' ')
print(*sp)

# Максимум в массиве
# Вводится массив, состоящий из целых чисел. Найти наибольшее среди них.
n = int(input())
s = [int(i) for i in input().split()]
print(max(s))

# більш компактний варіант розв'язку:
input()
print(max(input().split(), key=int))





######################################################################################################################
######################################################################################################################
####################################################  Ф У Н К Ц І Я  #################################################
######################################################################################################################
######################################################################################################################

def do_nothing():
    pass            # pass  <— ФУНКЦІЯ НІЧОГО НЕ РОБИТЬ


# моя маленька функція:
def my_func(a,b):
    return f'{a} + {b} = {a + b}'
print(my_func(5, 4))
# >> 5 + 4 = 9


# Звездный прямоугольник 1
# Напишите функцию draw_box(), которая выводит звездный прямоугольник с размерами 14 x 10 в соответствии с образцом:
# **********
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# *        *
# **********
def draw_box():
    print('*' * 10)
    for _ in range(12):
        print('*' + ' ' * 8 + '*')
    print('*' * 10)
draw_box()

# Звездный треугольник 1
# Напишите функцию draw_triangle(),
# которая выводит звездный прямоугольный треугольник с катетами, равными 10 в соответствии с образцом:
# *
# **
# ***
# ****
# *****
# ******
# *******
# ********
# *********
# **********
def draw_triangle():
    for i in range(1, 11):
        print('*' * i)
draw_triangle()

# Перейменування файлів (обрізання лишнього):
def print_name(a, b):
    s = ['现代陶瓷花瓶烛台摆件组合3D模型ID_312596I', '置物架3D模型下载      溜溜ID_393176', '现代陶瓷器皿人体模型摆件盆栽组合3D模型ID_270218', '花瓶组合3D模型下载      溜溜ID_534057', '北欧陶艺饰品摆件组合3D模型ID_444605', '书3D模型下载      溜溜ID_537310', '现代装饰架书架3D模型ID_294650']
    t = []
    for i in s:
        for j in range(len(i) - 1):
            if i[j] == a and i[j + 1] == b:
                t.append(i[j:])
    print(t)

print_name('I','D')

# Звездный треугольник
# Напишите функцию draw_triangle(fill, base), которая принимает два параметра:
# fill – символ заполнитель;
# base – величина основания равнобедренного треугольника;
# а затем выводит его.
# Примечание. Гарантируется, что основание треугольника – нечетное число.

def draw_triangle(fill, base):
    i = 1
    while i - 1 <= base / 2:
        print(fill * i)
        i += 1
    i = (base - 1) // 2
    while i != 0:
        print(fill * i)
        i -= 1

fill = input()
base = int(input())
draw_triangle(fill, base)

# більш компактний варіант розв'язку:
def draw_triangle(fill, base):
    i = 0
    while i <= base // 2 + 1:
        print(fill * i)
        i += 1
    i = base // 2
    while i > 0:
        print(fill * i)
        i -= 1

# більш компактний варіант розв'язку:
def draw_triangle(fill, base):
    print(*[fill * i for i in range(1, base // 2 + 1)], sep='\n')
    print(*[fill * i for i in range(base // 2 + 1, 0, -1)], sep='\n')

# Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:
# 1−(x+2)^2,    при x ≤ −2
# -2/x,        при −2 < x ≤ 2
# (x-2)^2 + 1,  при 2 < x
# 4.5  >> 7.25
def f(x):
    if x == 0:
        return 0
    elif x <= -2:
        return 1 - (x + 2) ** 2
    elif -2 < x <= 2:
        return -x / 2
    elif 2 < x:
        return (x - 2) ** 2 + 1

# ФИО
# Напишите функцию print_fio(name, surname, patronymic), которая принимает три параметра:
# name – имя человека;
# surname – фамилия человека;
# patronymic – отчество человека;
# а затем выводит на печать ФИО человека.
# Примечание. Предусмотрите тот факт, что все три буквы в ФИО должны иметь верхний регистр.

def print_fio(name, surname, patronymic):
    print(surname[0].upper(), name[0].upper(), patronymic[0].upper(), sep='')

name, surname, patronymic = input(), input(), input()
print_fio(name, surname, patronymic)

# Сумма цифр
# Напишите функцию sum_digits(n), принимающую в качестве аргумента натуральное число и возвращающую сумму его цифр.
def sum_dig(temp):
    t = 0
    for i in str(temp):
        t += int(i)
    return t

n = int(input())
print(sum_dig(n))

# Напишите функцию, которая возвращает длину гипотенузы прямоугольного треугольника по известным значениям его катетов.
def hipo(a, b):
    a, b = int(a), int(b)
    return int((a * a + b * b) ** 0.5)
#print('введіть перший і другий катети:')
x, y = input('введіть перший і другий катети через пробіл: ').split()
print(f'гіпотенуза прямокутного трикутника буде: {hipo(x, y)}')

# Конвертер километров
# Напишите функцию convert_to_miles(km), которая принимает в качестве аргумента расстояние в километрах и возвращает
# расстояние в милях. Формула для преобразования: мили = километры * 0.6214.

def convert_to_miles(km):
    return km * 0.6214

num = int(input())
print(convert_to_miles(num))

# Напишите функцию get_days(month), которая принимает в качестве аргумента номер месяца и возвращает
# количество дней в данном месяце.
# Примечание 1. Гаранитируется, что передаваемый аргумент находится в диапазоне от 1 до 12.
# Примечание 2. Считайте, что год является невисокосным.
# объявление функции
def get_days(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        days = 31
    elif month in [4, 6, 9, 11]:
        days = 30
    else:
        days = 28
    return days

# считываем данные
num = int(input())

# вызываем функцию
print(get_days(num))

# більш компактний варіант розв'язку:


# Напишите функцию get_factors(num), принимающую в качестве аргумента натуральное число и возвращающую список
# всех делителей данного числа.
# print(get_factors(1))
# print(get_factors(5))
# print(get_factors(10))
# >> [1]
# >> [1, 5]
# >> [1, 2, 5, 10]
def get_factors(num):
    s = []
    for i in range(1, n + 1):
        if n % i == 0:
            s.append(i)
    return s

n = int(input())

print(get_factors(n))

# Делители 2
# Напишите функцию number_of_factors(num),
# принимающую в качестве аргумента число и возвращающую количество делителей данного числа.
def number_of_factors(num):
    c = 0
    for i in range(1, n + 1):
        if n % i == 0:
            c += 1
    return c

n = int(input())

print(number_of_factors(n))

# Найти всех
# Напомним, что строковый метод find('a') возвращает местоположение первого вхождения символа a в строке.
# Проблема заключается в том, что данный метод не находит местоположение всех символов а.
# Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента:
# строку target и символ symbol и возвращает список, содержащий все местоположения этого символа в строке.
# Примечание 1. Если указанный символ не встречается в строке, то следует вернуть пустой список.
# print(find_all('abcdabcaaa', 'a'))
# >> [0, 4, 7, 8, 9]
def find_all(target, symbol):
    s = []
    for i in range(len(target)):
        if target[i] == symbol:
            s.append(i)
    return s

s = input()
char = input()

print(find_all(s, char))

# Merge lists 1
# Напишите функцию merge(list1, list2), которая принимает в качестве аргументов
# два отсортированных по возрастанию списка, состоящих из целых чисел, и объединяет их в один отсортированный список.
# Примечание 1. Списки list1 и list2 могут иметь разную длину.
# Примечание 2. Можно использовать списочный метод sort(), а можно обойтись и без него
# print(merge([1, 7, 10, 16], [5, 6, 13, 20]))
# >> [1, 5, 6, 7, 10, 13, 16, 20]
def merge(list1, list2):
    return sorted(list1 + list2)

numbers1 = [int(c) for c in input().split()]
numbers2 = [int(c) for c in input().split()]

print(merge(numbers1, numbers2))

#                                                      БЫСТРОЕ СЛИЯНИЕ ДВУХ ОТСОРТИРОВАННЫХ СПИСКОВ В ОДИН  O(n*log(n))
# Пусть мы имеем два уже отсортированных по возрастанию списка list1 и list2.
# Алгоритм быстрого слияния следующий:
# Создаем численные указатели p1 = 0 и p2 = 0 на начала обоих списков list1 и list2 соответственно;
# На каждом шаге берем меньший из двух элементов list1[p1] и list2[p2];
# Записываем его в результирующий список;
# Увеличиваем указатель на первый элемент списка (p1 или p2) из которого был взят элемент на 11;
# Когда один из начальных списков закончился, добавляем все оставшиеся элементы второго списка в результирующий список.
def quick_merge(list1, list2):
    l3 = []
    c1, c2 = 0, 0
    while c1 < len(list1) and c2 < len(list2):  # поки не скінчиться хоча б один зі списків
        if list1[c1] <= list2[c2]:
            l3.append(list1[c1])
            c1 += 1
        else:
            l3.append(list2[c2])
            c2 += 1
    if c1 < len(list1):  # після закінчення одного зі списків приліплюємо залишок
        l3 += list1[c1:]
    if c2 < len(list2):
        l3 += list2[c2:]
    return l3

l1 = [3, 10, 11, 12, 47, 57, 58, 63, 77, 79, 80, 95]
l2 = [0, 11, 12, 20, 24, 26, 47, 48, 53, 65, 70, 81, 84, 84, 90]
print(quick_merge(l1, l2))

# Merge lists 2
# На вход программе подается число n, а затем n строк, содержащих целые числа в порядке возрастания.
# Из данных строк формируются списки чисел. Напишите программу, которая объединяет указанные списки
# в один отсортированный список с помощью функции quick_merge(), а затем выводит его.
# На вход программе подается натуральное число n, а затем n строк, содержащих целые числа в порядке возрастания,
# разделенные символом пробела.
# 4
# 10 20
# 1 15
# 5 17
# 8 13 19
# >> 1 5 8 10 13 15 17 19 20

def quick_merge(l1, l2):
    p1, p2 = 0, 0
    L = []
    while p1 < len(l1) and p2 < len(l2):
        if l1[p1] <= l2[p2]:
            L.append(l1[p1])
            p1 += 1
        else:
            L.append(l2[p2])
            p2 += 1
    if p1 < len(l1):
        L += l1[p1:]
    if p2 < len(l2):
        L += l2[p2:]
    return L

n = int(input())
s1 = []
s2 = [[int(i) for i in input().split()] for _ in range(n)]

for i in range(n):
    s1 = quick_merge(s1, s2[i])
print(*(s1))

# більш компактний варіант розв'язку:
def quick_merge(num):
  a = []
  for i in range(num):
    a += [int(i) for i in input().split()]
  a.sort()
  return a

n = int(input())
print(*quick_merge(n))


# вивести мінімум, при довільній кількості параметрів *
def min(*a):  # *a - фінкція приймає довльне число аргументів
    m = a[0]
    for x in a:
        if m > x:
            m = x
    return m
print(min(5, 3))
print(min(5, 3, 6, 10))
print(min([5, 3, 6, 10]))

# функція, що повертає послідовність і має крок по замовчуванню 3:
def my_range(start, stop, step=3):  # step=3 - значення за замовчуванням
    s = []
    if step > 0:
        x = start
        while x < stop:
            s += [x]
            x += step
    elif step < 0:
        x = start
        while x > stop:
            s += [x]
            x += step
    return s
print(my_range(2, 15))
# >> [2, 5, 8, 11, 14]

#  Рекурсивна функція, безкінечно визиває сама себе:
def short_story():
    print("У попа была собака, он ее любил.")
    print("Она съела кусок мяса, он ее убил,")
    print("В землю закопал и надпись написал:")
    short_story()
print(short_story())

# Напишите функцию modify_list(l), которая принимает на вход список целых чисел,
# удаляет из него все нечётные значения, а чётные нацело делит на два.
# Функция не должна ничего возвращать, требуется только изменение переданного списка, например:
# lst = [1, 2, 3, 4, 5, 6]
# print(modify_list(lst))  # >> None
# print(lst)               # >> [1, 2, 3]
# modify_list(lst)
# print(lst)               # >> [1]
#
# lst = [10, 5, 8, 3]
# modify_list(lst)
# print(lst)               # >> [5, 4]
# Функция не должна осуществлять ввод/вывод информации.
def modify_list(l):
    c = len(l) - 1
    while c != -1:
        if l[c] % 2 != 0:
            l.pop(c)
        else:
            l[c] //= 2
        c -= 1

# варіант, якщо створити новий список:
def modify_list(l):
    s = []
    global lst
    for i in l:
        if i == 0:
            s.append(0)
        elif i % 2 == 0:
            s.append(int(i // 2))
    lst = s

# Is Valid Triangle?
# Напишите функцию is_valid_triangle(side1, side2, side3), которая принимает в качестве аргументов
# три натуральных числа, и возвращает значение True если существует невырожденный треугольник со сторонами
# side1, side2, side3 и False в противном случае.
# print(is_valid_triangle(2, 2, 2))  >>  True
# print(is_valid_triangle(2, 3, 10))  >>  False
# print(is_valid_triangle(3, 4, 5))  >>  True
def is_valid_triangle(side1, side2, side3):
    if side1 >= side2 + side3 or side2 >= side1 + side3 or side3 >= side1 + side2:
        return False
    else:
        return True
a, b, c = int(input()), int(input()), int(input())
print(is_valid_triangle(a, b, c))

# Good password
# Напишите функцию is_password_good(password), которая принимает в качестве аргумента строковое значение
# пароля password и возвращает значение True если пароль является надежным и False в противном случае.
# Пароль является надежным если:
# его длина не менее 8 символов;
# он содержит как минимум одну заглавную букву (верхний регистр);
# он содержит как минимум одну строчную букву (нижний регистр);
# он содержит хотя бы одну цифру.
def is_password_good(p):
    if len(p) >= 8 and not p.isdigit() and not p.isalpha() and p.upper() != p and p.lower() != p:
        return True
    else:
        return False

txt = input()
print(is_password_good(txt))

# інший варіант розв'язку:
from re import findall

def is_password_good(password):
    return all([len(password) >= 8,
                len(findall('[A-Z]', password)),
                len(findall('[a-z]', password)),
                len(findall('[0-9]', password))])


# Is a Number Prime?
# Напишите функцию is_prime(num), которая принимает в качестве аргумента натуральное число и возвращает
# значение True если число является простым и False в противном случае.
# print(is_prime(1)) >> False
# print(is_prime(10)) >> False
# print(is_prime(17)) >> True
def is_prime(num):
    c = 0
    for i in range(1, num + 1):
        if num % i == 0:
            c += 1
    if c == 2:
        return True
    else:
        return False

# Next Prime
# Напишите функцию get_next_prime(num), которая принимает в качестве аргумента натуральное число num
# и возвращает первое простое число большее числа num.
# Примечание 1. Используйте функцию is_prime() из предыдущей задачи.
# print(get_next_prime(6))  >> 7
# print(get_next_prime(7))  >> 11
# print(get_next_prime(14))  >> 17
def is_prime(num):
    c = 0
    for i in range(1, num + 1):
        if num % i == 0:
            c += 1
    if c == 2:
        return True
    else:
        return False

def get_next_prime(num):
    num += 1
    while not is_prime(num):
        num += 1
    return num

n = int(input())
print(get_next_prime(n))

# більш компактний розв'язок:
def get_next_prime(num):
    num += 1
    for i in range(2, num):
        if num % i == 0:
            return get_next_prime(num)
    return num

n = int(input())
print(get_next_prime(n))

# Ровно в одном
# Напишите функцию is_one_away(word1, word2), которая принимает в качестве аргументов два слова word1 и word2
# и возвращает значение True если слова имеют одинаковую длину и отличаются ровно в 1 символе
# и False - в противном случае.
# print(is_one_away('bike', 'hike')) >> True
# print(is_one_away('water', 'wafer')) >> True
# print(is_one_away('abcd', 'abpo')) >> False
# print(is_one_away('abcd', 'abcde')) >> False

def is_one_away(w1, w2):
    if len(w1) != len(w2):
        return False
    else:
        c = 0
        for i in range(len(w1)):
            if w1[i] != w2[i]:
                c += 1
                if c == 2:
                    return False
        return True

txt1 = input()
txt2 = input()
print(is_one_away(txt1, txt2))

# більш компактний розв'язок:
def is_one_away(w1, w2):
    a = 0
    for i in range(len(w1)):
        if w1[i] != w2[i]:
            a += 1
    return len(w1) == len(w2) and a == 1

# Змеиный регистр
# Напишите функцию convert_to_python_case(text), которая принимает в качестве аргумента строку в «ВерблюжьемРегистре»
# и преобразует его в «змеиный_регистр».
# print(convert_to_python_case('ThisIsCamelCased')) >> this_is_camel_cased
# print(convert_to_python_case('IsPrimeNumber')) >> is_prime_number
def convert_to_python_case(t):
    s = t[0]
    for i in range(1, len(t)):
        if t[i].isupper():
            s += '_' + t[i]
        else:
            s += t[i]
    return s.lower()

txt = input()
print(convert_to_python_case(txt))

# інший варіант розв'язку:
def convert_to_python_case(text):
    s = ''
    for el in text:
        if el.isupper():
            s += '_'
        s += el.lower()
    return s[1:]

print(convert_to_python_case(input()))

# Правильная СКОБОЧНАЯ последовательность
# Напишите функцию is_correct_bracket(text), которая принимает в качестве аргумента непустую строку text,
# состоящую из символов '(' и ')' и возвращает значение True если поступившая на вход строка является
# правильной скобочной последовательностью и False в противном случае.
# Правильной скобочной последовательностью называется строка, состоящая только из символов '(' и ')',
# где каждой открывающей скобке найдется парная закрывающая скобка.
# print(is_correct_bracket('()(()())')) # >> True
# print(is_correct_bracket(')(())(')) # >> False
# print(is_correct_bracket('()()))((')) # >> False
# print(is_correct_bracket('())(()')) # >> False

def is_correct_bracket(t):
    c = 0
    for i in t:
        if i == '(':
            c += 1
        if i == ')':
            c -= 1
            if c < 0:
                break
    return t[0] == '(' and t[-1] == ')' and c == 0

txt = input()
print(is_correct_bracket(txt))

# більш компактний варіант розв'язку:
def is_correct_bracket(t):
    while '()' in t:
        t = t.replace('()', '')
    return not t  # not инвертирует значение логической переменной и функция возвратит True если
                  # строка пустая (None), а пустая она только в случае если последовательность скобок правильная.


# ФУНКЦИИ С ВОЗВРАТОМ НЕСКОЛЬКИХ ЗНАЧЕНИЙ:
def solve(a, b, c, d, e, f):
    x = (d * e - b * f) / (a * d - b * c)
    y = (a * f - c * e) / (a * d - b * c)
    return x, y

print(solve(2, 3, 4, 1, 2, 5)) # >> (1.3, -0.2)

xsol, ysol = solve(2, 3, 4, 1, 2, 5) #  так можна відокремити два значення return x, y
print("Розв'язком системи будуть числа:" , 'x =', xsol, 'y =', ysol) # >> Розв'язком системи будуть числа: x = 1.3 y = -0.2

# ПЛОЩАДЬ и ДЛИНА
# Напишите функцию get_circle(radius), которая принимает в качестве аргумента радиус окружности
# и возвращает два значения: длину окружности и площадь круга, ограниченного данной окружностью.
# Длина окружности и площадь круга радиуса rr вычисляются по формулам:
# С=2πr,S=πr^2
# Для числа π используйте глобальную константу из модуля math.
# print(get_circle(1)) >> 6.283185307179586 3.141592653589793
# print(get_circle(1.5)) >> 6.283185307179586 3.141592653589793

import math
def get_circle(r):
    c = 2 * math.pi * r
    s = math.pi * r ** 2
    return c, s

r = float(input())
length, square = get_circle(r)
print('Довжина кола =', length)
print('Площа кола =', square)

# КОРНИ УРАВНЕНИЯ
# Напишите функцию solve(a, b, c), которая принимает в качестве аргументов три целых числа a, b, c – коэффициенты
# квадратного уравнения ax^2+bx+c = 0  и возвращает его корни в порядке возрастания.
# Примечание 2. Гарантируется, что квадратное уравнение имеет корни.#
# print(solve(1, -4, -5)) >> -1.0 5.0
# print(solve(-2, 7, -5)) >> 1.0 2.5
# print(solve(1, 2, 1)) >> -1.0 -1.0

def solve(a, b, c):
    import math
    D = (pow(b, 2) - 4 * a * c)
    if D < 0:
        return 'Нет корней', ''
    elif D == 0:
        return -(b / (2 * a)), -(b / (2 * a))
    elif D > 0:
        x = min((-b + math.sqrt(D)) / (2 * a), (-b - math.sqrt(D)) / (2 * a))
        y = max((-b + math.sqrt(D)) / (2 * a), (-b - math.sqrt(D)) / (2 * a))
    return x, y

a, b, c = (int(input()) for _ in range(3))
x1, x2 = solve(a, b, c)
print(x1, x2)

# більш компактний варіант розв'язку:
def solve(a, b, c):
    d = (b ** 2) - 4 * a * c
    x1 = ((-1 * b) - d ** 0.5) / (2 * a)
    x2 = ((-1 * b) + d ** 0.5) / (2 * a)
    return min(x1, x2), max(x1, x2)

# Звездный треугольник
# Напишите функцию draw_triangle(), которая выводит звездный равнобедренный треугольник
# с основанием и высотой равными 15 и 8 соответственно:
#        *
#       ***
#      *****
#     *******
#    *********
#   ***********
#  *************
# ***************
# Для вывода треугольника используйте цикл for.
# Справа от звездочек пробелов нет.
# print('пробел' * (число строк - 1 - i) + '*' * (1 + i * 2))
def draw_triangle():
    for i in range(8):
        print(' ' * (7 - i) + '*' * (1 + 2 * i))

draw_triangle()

# Калькулятор доставки
# Интернет магазин осуществляет экспресс доставку для своих товаров по цене 1000 рублей за первый товар
# и 120 рублей за каждый последующий товар. Напишите функцию get_shipping_cost(quantity),
# которая принимает в качестве аргумента натуральное число quantity – количество товаров в заказе и возвращает
# стоимость доставки.
# print(get_shipping_cost(1)) >> 1000
# print(get_shipping_cost(3)) >> 1240

def get_shipping_cost(quantity):
    return 1000 + 120 * (quantity - 1)

n = int(input())
print(get_shipping_cost(n))

# Биномиальный коэффициент
# Напишите функцию compute_binom(n, k), которая принимает в качестве аргументов два натуральных числа n и k
# и возвращает значение биномиального коэффициента, равного n! /(k! * (n-k)!)
# Факториалом натурального числа n, называется произведение всех натуральных чисел от 1 до n, то есть
# n!=1 *2 * 3 * ... * n
#  Реализуйте вспомогательную функцию factorial(n),
#  вычисляющую факториал числа или воспользуйтесь уже готовой функцией из модуля math.

def compute_binom(n, k):
    from math import factorial as f
    return f(n) // (f(k) * f(n - k))

n = int(input())
k = int(input())
print(compute_binom(n, k))

# ЧИСЛО СЛОВАМИ
# Напишите функцию number_to_words(num), которая принимает в качестве аргумента натуральное число num
# и возвращает его словесное описание на русском языке.
# Примечание 1. Считайте, что число 1 ≤ num ≤ 99.
# print(number_to_words(7)) >> семь
# print(number_to_words(85)) >> восемьдесят пять

def number_to_words(num):
    o = ['один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять']
    t = ['десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать',
         'семнадцать', 'восемнадцать', 'девятнадцать']
    d = ['двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто']
    if num <= 9:
        return o[num - 1]
    if 10 <= num < 20:
        return t[num - 10]
    if 20 <= num <= 99 and num % 10 == 0:
        return d[num // 10 - 2]
    else:
        return str(d[num // 10 - 2]) + ' ' + str(o[num % 10 - 1])


n = int(input())
print(number_to_words(n))

# інший варіант розв'язку СЛОВНИКОМ:
def number_to_words(num):
    d = {1: 'один', 2: 'два', 3: 'три', 4: 'четыре', 5: 'пять', 6: 'шесть', 7: 'семь', 8: 'восемь',
         9: 'девять', 10: 'десять', 11: 'одиннадцать', 12: 'двенадцать', 13: 'тринадцать', 14: 'четырнадцать',
         15: 'пятнадцать', 16: 'шестнадцать', 17: 'семнадцать', 18: 'восемнадцать', 19: 'девятнадцать',
         20: 'двадцать', 30: 'тридцать', 40: 'сорок', 50: 'пятьдесят', 60: 'шестьдесят', 70: 'семьдесят',
         80: 'восемьдесят', 90: 'девяносто'}
    if 1 <= num < 20 or num % 10 == 0:
        return d[num]
    else:
        return f'{d[num - num % 10]} {d[num % 10]}'

# ИСКОМЫЙ МЕСЯЦ
# Напишите функцию get_month(language, number), которая принимает на вход два аргумента language – язык ru или en
# и number – номер месяца (от 1 до 12) и возвращает название месяца на русском или английском языке.
# print(get_month('ru', 1)) >> январь
# print(get_month('ru', 12)) >> декабрь
# print(get_month('en', 1)) >> january
# print(get_month('en', 10)) >> october

def get_month(lan, n):
    en = ['january', 'february', 'march', 'april', 'may', 'june',
          'july', 'august', 'september', 'october', 'november', 'december']
    ru = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь',
          'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
    if lan == 'en':
        return en[n - 1]
    else:
        return ru[n - 1]

lan = input()
num = int(input())
print(get_month(lan, num))

# інший варіант розв'язку СЛОВНИКОМ:
def get_month(language, number):
    d = {'ru': {1: 'январь', 2: 'февраль', 3: 'март', 4: 'апрель', 5: 'май', 6: 'июнь',
                7: 'июль', 8: 'август', 9: 'сентябрь', 10: 'октябрь', 11: 'ноябрь', 12: 'декабрь',},
         'en': {1: 'january', 2: 'february', 3: 'march', 4: 'april', 5: 'may', 6: 'june', 7: 'july',
                8: 'august', 9: 'september', 10: 'october', 11: 'november', 12: 'december',}}
    return d.get(language).get(number)

# МАГИЧЕСКИЕ ДАТЫ
# Магическая дата – это дата, когда день, умноженный на месяц, равен числу образованному последними двумя цифрами года.
# Напишите функцию, is_magic(date) которая принимает в качестве аргумента строковое представление корректой даты
# и возвращает значение True если дата является магической и False в противном случае.
# print(is_magic('10.06.1960')) >> True
# print(is_magic('11.06.1960')) >> False

def is_magic(date):
    d = date.split('.')
    return int(d[0]) * int(d[1]) == int(d[2][-2:])

date = input()
print(is_magic(date))

# ПАНГРАММЫ
# Панграмма – это фраза, содержащая в себе все буквы алфавита.
# Обычно панграммы используют для презентации шрифтов, чтобы можно было в одной фразе рассмотреть все глифы.
# Напишите функцию, is_pangram(text) которая принимает в качестве аргумента строку текста на английском языке
# и возвращает значение True если текст является панграммой и False в противном случае.
# Гарантируется, что введенная строка содержит только буквы английского алфавита.
# print(is_pangram('Jackdaws love my big sphinx of quartz')) >> True
# print(is_pangram('The jay pig fox zebra and my wolves quack')) >> True
# print(is_pangram('Hello world')) >> False

def is_pangram(text):
    t = text.lower()
    s = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
         'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    for i in t:
        if i in s:
            s.remove(i)
    return not s

text = input()
print(is_pangram(text))

# інший варіант розв'язку через SET:
def is_pangram(text):
    return set('qwertyuioplkjhgfdsazxcvbnm').issubset(set(text.lower()))


# ЛІНІЙНИЙ ПОШУК O(n):
def linear_search_index(array, key):
    for i in range(len(array)):
        if array[i] == key:
            return i
    return -1  # при помилці/відсутності key виведе -1

x = sorted([randint(4, 50) for i in range(10)])
print(x)

# БІНАРНИЙ ПОШУК O(log(n)):
def binary_search_index(array, key):
    start = 0
    stop = len(array)
    while start <= stop:
        mid = (start + stop) // 2
        if array[mid] == key:
            return mid
        elif array[mid] > key:
            stop = mid - 1
        elif array[mid] < key:
            start = mid + 1
    return -1  # при помилці/відсутності key виведе -1

# УГАДАЙКА ЧИСЕЛ
# Описание проекта: программа генерирует случайное число в диапазоне от 1 до 100 и просит
# пользователя угадать это число.
# Если догадка пользователя больше случайного числа, то программа должна вывести сообщение
# 'Слишком много, попробуйте еще раз'. Если догадка меньше случайного числа, то программа должна вывести сообщение
# 'Слишком мало, попробуйте еще раз'. Если пользователь угадывает число, то программа должна поздравить его и
# вывести сообщение 'Вы угадали, поздравляем!'.

from random import randint
print('Добро пожаловать в числовую угадайку!')#, 'n_rand =', n_rand)
print('АІ должен выбрать число от 1 до N, которое вам предстоит угадать.')


def is_valid(n):
    return n.isdigit() and 1 <= int(n) <= int(right)  # проверка числа на корректность

again = 'да'
while again == 'да':  # бесконечная игра пока "да"
    while True:
        right = input('\n' + 'Введите число N: ')  # указание правой границы диапазона
        if is_valid(right): # проверка числа на корректность
            right = int(right)
            print('OK')
            print()
            break
        else:
            print('Нужно ввести ЦЕЛОЕ ЧИСЛО')

    n_rand = randint(1, int(right))  # диапазон для угадывания
    c = 0  # счетчик попыток

    while True:  # безконечный цыкл попыток, пока не угадаешь
        n = input(f'Введите целое число от 1 до {right} включительно: ')
        if is_valid(n): # проверка числа на корректность
            c += 1
            n = int(n)
            if n < n_rand:
                print('Ваше число МЕНЬШЕ загаданного, попробуйте еще разок' + '\n')
                continue
            elif n > n_rand:
                print('Ваше число БОЛЬШЕ загаданного, попробуйте еще разок' + '\n')
                continue
            elif n == n_rand:
                if c % 10 == 1 and c % 100 != 11:
                    p = f'Вам понадобилась {c} попытка'
                elif n % 10 in [2, 3, 4] and n % 100 not in [12, 13, 14]:
                    p = f'Вам понадоболсь {c} попытки'
                else:
                    p = f'Вам понадобилось {c} попыток'
                print('ВЫ УГАДАЛИ, ПОЗДРАВЛЯЕМ!', '\n' + p)
                break
        else:
            print(f'А может быть все-таки введем целое число от 1 до {right}?' + '\n')
    again = input('\n' + 'Хотите сыграть еще разочек? (да/нет): ' + '\n')
    if again.lower() == 'нет':  # закончить цикл, если ввели "нет"
        break

print('Спасибо, что играли в числовую угадайку. Еще увидимся...')

# МАГИЧЕСКИЙ ШАР 8
# Описание проекта: магический шар 8 (шар судьбы) — шуточный способ предсказывать будущее.
# Программа должна просить пользователя задать некий вопрос, чтобы случайным образом на него ответить.

from random import randrange
answers = ['Бесспорно', 'Предрешено', 'Никаких сомнений', 'Определённо ДА!', 'Можешь быть уверен в этом',
           'Мне кажется - да', 'Вероятнее всего', 'Хорошие перспективы', 'Знаки говорят - да', 'Да',
           'Пока неясно, попробуй снова', 'Спроси позже', 'Лучше не рассказывать', 'Сейчас нельзя предсказать', 'Сконцентрируйся и спроси опять',
           'Даже не думай', 'Мой ответ - нет', 'По моим данным - нет', 'Перспективы не очень хорошие', 'Весьма сомнительно']
print('Привет Мир, я магический шар, и я знаю ответ на любой твой вопрос.')
name = input('Напишите, как вас зовут:' + '\n')
print(f'Привет {name}!')

def choise(answers):
    return answers[randrange(1, 21)]

game = 'да'
while game == 'да':
    question = input('Задай свой вопрос: ' + '\n')
    if len(question) % 2 == 0:
        print(choise(answers) + '\n')
    game = input('Хочешь задать еще вопрос? (да/нет): ')
    if game.lower() == 'нет':
        break

print('\n' + 'Возвращайся если возникнут вопросы!')

# ГЕНЕРАТОР БЕЗОПАСНЫХ ПАРОЛЕЙ
# Описание проекта: программа генерирует заданное количество паролей и включает в себя умную настройку на длину пароля,
# а также на то, какие символы требуется в него включить, а какие исключить.
# Подключите модуль random;
# Создайте строковые константы:
# digits: 0123456789;
# lowercase_letters: abcdefghijklmnopqrstuvwxyz;
# uppercase_letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ;
# punctuation: !#$%&*+-=?@^_.
# Создайте переменную chars = '', которая будет содержать все символы, которые могут быть в генерируемом пароле.
# Программа должна запрашивать у пользователя следующую информацию:
# Количество паролей для генерации;
# Длину одного пароля;
# Включать ли цифры 0123456789?
# Включать ли прописные буквы ABCDEFGHIJKLMNOPQRSTUVWXYZ?
# Включать ли строчные буквы abcdefghijklmnopqrstuvwxyz?
# Включать ли символы !#$%&*+-=?@^_?
# Исключать ли неоднозначные символы il1Lo0O?
# На основании введенной пользователем информации, сформируйте переменную chars, содержащую все символы,
# которые могут быть в генерируемом пароле.
# Напишите функцию generate_password(), которая принимает два аргумента:
# length: длину пароля;
# chars: алфавит из символов которого состоит пароль;
# и возвращает пароль.
#
# Используя цикл for, сгенерируйте необходимое количество паролей.

from random import sample
digits = '0123456789'
lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
punctuation = '!#$%&*+-=?@^_'
symb = 'il1Lo0O'
chars = list()

def num_is_valid(n):  # проверка вводимого числа на валидность
    while not n.isdigit():
        print('Нужно ввести ЦЕЛОЕ ЧИСЛО')
        n = input('Попробуйте еще раз: ')
    return int(n)

def yes_no_is_valid(s): # проверка вводимого символа (y/n) на валидность
    while s.lower().strip() not in ['y', 'n']:
        print('Нужно ввести "y"(да) или "n"(нет)')
        s = input('Попробуйте eще разок: ')
    return s.lower().strip()

print('Вас приветствует генератор паролей!' + '\n')
kol_pas = num_is_valid(input('Введите количество паролей, которое вам нужно сгенерировать: '))
dlina_pas = num_is_valid(input('Введите длину одного пароля (количество символов в нем): '))

digits_yes = yes_no_is_valid(input('Включать ли цифры 0123456789 ? (y/n): '))
uppercase_letters_yes = yes_no_is_valid(input('Включать ли прописные буквы ABCDEFGHIJKLMNOPQRSTUVWXYZ ? (y/n): '))
lowercase_letters_yes = yes_no_is_valid(input('Включать ли строчные буквы abcdefghijklmnopqrstuvwxyz ? (y/n): '))
punctuation_yes = yes_no_is_valid(input('Включать ли символы !#$%&*+-=?@^_ ? (y/n): '))
symb_no = yes_no_is_valid(input('Исключать ли неоднозначные символы il1Lo0O ? (y/n): '))
if digits_yes == 'y':
    chars += digits
if uppercase_letters_yes == 'y':
    chars += uppercase_letters
if lowercase_letters_yes == 'y':
    chars += lowercase_letters
if punctuation_yes == 'y':
    chars += punctuation
if symb_no == 'y':
     for i in symb:
         chars.remove(i)
print()
print('Ваш пароль:' if kol_pas == 1 else 'Ваши пароли:', end='\n')
for i in range(kol_pas):
    print(''.join(sample(chars, dlina_pas)), end='\n')

# ШИФР ЦЕЗАРЯ
# Описание проекта: требуется написать программу, способную шифровать и дешифровать текст в соответствии
# с алгоритмом Цезаря. Она должна запрашивать у пользователя следующие данные:
# направление: шифрование или дешифрование;
# язык алфавита: русский или английский;
# шаг сдвига (со сдвигом вправо).
# Примечание 1. Считайте, что в русском языке 32 буквы (буква ё отсутствует).
# Примечание 2. Неалфавитные символы — знаки препинания, пробелы, цифры — не меняются.
# Примечание 3. Сохраните регистр символов.
# Составляющие проекта:
# Целые числа (тип int);
# Модульная арифметика;
# Переменные;
# Ввод / вывод данных (функции input() и print());
# Условный оператор (if/elif/else);
# Цикл for/while;
# Строковые методы.
# 10
# Блажен, кто верует, тепло ему на свете!
# >> Лхкрпч, фьш мпъэпь, ьпщхш пцэ чк ымпьп!
# 17
# To be, or not to be, that is the question!
# >> Kf sv, fi efk kf sv, kyrk zj kyv hlvjkzfe!


print('ШИФР ЦЕЗАРЯ приветствует тебя!')
print('Программа позволит вам зашифровать/розшифровать введенный текст.' + '\n')

def step_is_valid(n):  # проверка вводимого числа на валидность
    while not n.isdigit():
        print('Нужно ввести ЦЕЛОЕ ЧИСЛО')
        n = input('Попробуйте еще раз: ')
    return int(n)

def cod_decod_is_valid(s): # проверка вводимого символа (+/-) на валидность
    while s.lower().strip() not in ['+', '-']:
        print('Нужно ввести "+"(шифровать) или "-"(розшифровывать)')
        s = input('Попробуйте eще разок: ')
    return s.lower().strip() # удаляет лишние пробелы и делает символы прописными

def lang_is_valid(s): # проверка вводимого символа (ru/en) на валидность
    while s.lower().strip() not in ['ru', 'en']:
        print('Нужно ввести "ru"(для русского алфавита) или "en"(для английского алфавита)')
        s = input('Попробуйте eще: ')
    return s.lower().strip()

cod_dec = cod_decod_is_valid(input('Будем шифровать(+) или розшифровывать(-)? Введите + или - : '))
lang_cod = lang_is_valid(input('Для использывания русского алфавита введите ru для английского введите en : '))
step = step_is_valid(input('Укажите "шаг сдвига" (целое число): '))
text = input('Теперь введите текст: ').replace('ё', 'е').replace('Ё', 'Е')

def cesars_code(cod_dec, lang_cod, step, text):
    alp = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
    alp_en = 'abcdefghijklmnopqrstuvwxyz'
    ansv = list()

    if lang_cod == 'en':
        alp = alp_en
    if cod_dec == '-':
        step = -step
    for i in text:  # для каждого символа исходного текста:
        if i.isalpha():  # если символ это буква:
            k = alp.find(i.lower()) + step
            #print('len(alp) =', len(alp), ' k =', k, ' i =', i+'(буква)' ' alp.find(i) =', alp.find(i), ' step =', step)
            if k >= len(alp):  # если шаг больше длины алфавита (при шифровании)
                while k >= len(alp):
                    k -= len(alp)
            if k < len(alp) and k < 0:  # если шаг больше длины алфавита (при расшифровке)
                while abs(k) >= len(alp):
                    k += len(alp)
            if i == i.upper():  # для ЗАГЛАВНЫХ:
                ansv.append(alp[k].upper())
            else:  # для прописных:
                ansv.append(alp[k])
        else:  # если символ это цифра, или знак препинания, или пробел:
            ansv.append(i)
    print('\n' + 'АВЕ ЦЕЗАРЬ!')
    return ''.join(ansv)

print('\n' + 'Результат:' + '\n' + cesars_code(cod_dec, lang_cod, step, text))

# Текст "Hawnj pk swhg xabkna ukq nqj." был получен в результате шифрования алгоритмом Цезаря
# со сдвигом вправо на n символов. Расшифруйте данный текст.
# Считайте, что n ∈ [0;25].
t = 'Hawnj pk swhg xabkna ukq nqj.'
for i in range(0,26):
    print(cesars_code('-', 'en', i, t))

# Аве, Цезарь
# На вход программе подается строка текста на английском языке, в которой нужно зашифровать все слова.
# Каждое слово строки следует зашифровать с помощью шифра Цезаря (циклического сдвига на длину этого слова).
# Строчные буквы при этом остаются строчными, а прописные – прописными.
# Примечание. Символы, не являющиеся английскими буквами, не изменяются.
# Day, mice. "Year" is a mistake!
# >> Gdb, qmgi. "Ciev" ku b tpzahrl!

def cesars_code(text):

    alp = 'abcdefghijklmnopqrstuvwxyz'
    text = text.split()
    total = list()  # итоговый список
    for j in text:  # для каждого элемента списка text:
        ansv = list()  # создаем промежуточный список, переноса для каждого элемента списка text в итоговый total

        temp = list()  # создаем временный список, для подсчета длины сдвига без учета знаков препинания
        for i in j:
            if i.isalpha():
                temp.append(i)

        for i in j:  # для каждого символа элемента списка text:
            if i.isalpha():  # если символ это буква:
                k = alp.find(i.lower()) + len(temp)
                if k >= len(alp):  # если шаг больше длины алфавита (при шифровании)
                    while k >= len(alp):
                        k -= len(alp)
                if i == i.upper():  # для ЗАГЛАВНЫХ:
                    ansv.append(alp[k].upper())
                else:  # для прописных:
                    ansv.append(alp[k])
            else:  # если символ это цифра, или знак препинания, или пробел:
                ansv.append(i)
        total.append(''.join(ansv))

    return ' '.join(total)

print(cesars_code(input()))

# більш компактний варіант розв'язку:
def skr(si):
    ls = si.split()
    lk = [len(s.strip('.,!?\'\"')) for s in ls]
    for i in range(len(ls)):
        lsi = list(ls[i])
        for j in range(len(lsi)):
            if lsi[j].isalpha():
                if lsi[j].isupper():
                    lsi[j] = chr(65 + (ord(lsi[j]) + lk[i] - 65) % 26)
                if lsi[j].islower():
                    lsi[j] = chr(97 + (ord(lsi[j]) + lk[i] - 97) % 26)
        ls[i] = ''.join(lsi)
    return ' '.join(ls)
print(skr(input()))

# СИСТЕМЫ СЧИСЛЕНИЯ
# Перевод чисел из любой системы счисления в десятичную
# https://stepik.org/lesson/349851/step/2?unit=333706
n = input()
k = int(input())
def in_decimal(n, k):
    n = str(n)
    s = int()
    m = n[::-1]
    for i in range(len(m)):
        if k == 16 and m[i].isalpha():
            p = ord(m[i]) - 55
            s += p * k ** i
        else:
            s += int(m[i]) * k ** i
    return s
print(in_decimal(n,k))

# ПЕРЕВОД ЧИСЕЛ ИЗ ЛЮБОЙ СИСТЕМЫ СЧИСЛЕНИЯ В ДЕСЯТИЧНУЮ:
# 352(10-десяткова система числення) = 3 * 10**2 + 5 * 10**1 + 2 * 10**0
# 110101(2) = 1 * 2**5 + 1 * 2**4 + 1 * 2**3 + 1 * 2**2 + 1 * 2**1 + 1 * 2**0 = 53(10)
n = input()  # саме число
k = int(input())  # в якій системі числення число
def in_decimal(n, k):
    n = str(n).upper()  # для 16-системи(впевнитись, що всі літери ВЕЛИКІ)
    s = int()  # результуючий список
    m = n[::-1]
    for i in range(len(m)):
        if k == 16 and m[i].isalpha():  # для 16-системи числення
            p = ord(m[i]) - 55
            s += p * k ** i
        else:
            s += int(m[i]) * k ** i  # для всіх інших систем
    return s
print(in_decimal(n,k))

# В саду 88n фруктовых деревьев, из них 32n яблони, 22n груши, 16n слив и 17n вишен.
# В какой системе счисления посчитаны деревья?
# Примечание. Переведите числа из n-ой системы счисления в десятичную и составьте уравнение.
i = 0
while True:
    if in_decimal(88, i) == in_decimal(32, i) + in_decimal(22, i) + in_decimal(17, i) + in_decimal(16, i):
        break
    i += 1
print(i)

# Binary, Octal, Hex
# На вход программе подается натуральное число в десятичной системе счисления.
# Напишите программу, которая переводит его в двоичную, восьмеричную и шестнадцатеричную системы счисления.
# Примечание 1. Используйте встроенные функции bin(), oct(), hex().
# Примечание 2. Для шестнадцатеричной системы счисления используйте заглавные буквы A, B, C, D, E, F.
# Примечание 3. BOH = Binary, Octal, Hex.
n = int(input())
def in_BOH(n):
    return str(bin(n))[2:] + '\n' + oct(n)[2:] + '\n' + hex(n)[2:].upper()
print(in_BOH(n))





# СИРАКУЗСКАЯ ПОСЛЕДОВАТЕЛЬНОСТЬ, или последовательность Коллатца
# Строится так: возьмём натуральное число n; если оно чётное, то заменим его числом n/2; если же оно нечётное,
# то заменим его числом 3n+1. Получившееся число — следующее в сиракузской последовательности после числа n.
# Затем заменяем получившееся число по тому же правилу, и так далее.
# Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
# Обычно, если проделать такую замену достаточно много раз, мы приходим к числу 1 (за которым следует снова 1).
# Например:
# 8 → 4 → 2 → 1 или 10 → 5 → 16 → 8 → 4 → 2 → 1.
# Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
n, c = int(input()), 0
while n != 1:
    if n % 2 == 0:
        n = n / 2
    else:
        n = 3 * n + 1
    c += 1
print(c)

# інший варіант розв'язку:
n = int(input())
c = 0
while n - 1:
    n = 3 * n + 1  if n % 2 else n / 2  # n = 3 * n + 1, але якщо n % 2 тоді n = n / 2
    c += 1
print(c)

# ДЕЙСТВИТЕЛЬНЫЕ ЧИСЛА
# a + b = c
# Даны три действительных числа: a, b, c. Проверьте, выполняется ли равенство a + b = c .
# Если равенство выполняется, выведите YES, если не выполняется, выведите NO.
# Числа a, b, c –  действительные, положительные, не превосходят 10 и заданы не более, чем с 7 знаками после точки.
# 2
# 3
# 7
# >> NO

# 0.1
# 0.2
# 0.3
# >> YES
a, b, c = (float(input()) * 1000 for i in range(3))
print('YES' if a + b == c else 'NO')

# Утренняя пробежка - 1
# В первый день спортсмен пробежал x километров, а затем он каждый день увеличивал пробег на 70%
# от предыдущего значения.
# По данному числу y определите номер дня, на который пробег спортсмена составит не менее y километров.
# На вход программа получает два действительных числа x и y . Числа положительные,
# действительные, не превосходят 1000, заданы с точностью до шести знаков после запятой.
# 10 30
# >> 4
x, y = map(float, input().split())
d = 1
while x < y:
    x *= 1.7
    d += 1
print(d)




#######################################################################################################################
##################################################  С Л О В Н И К И  ##################################################
#######################################################################################################################

# поставить в соответствие англ. буквам русские буквы:
a = "hello world!"
b = "хелло ворлд!"
c = dict(zip(a, b))
print("".join([c[i] for i in a]))

customer = {'name': 'Alex', 'country': ''}
customer.update({'age': 36, 'country': 'USA'})
print(customer)
if customer['country'] == 'USA' and customer['age'] >= 28:
    print('Hello, ' + customer['name'] + '!')

# На вход программе поступает целое число n.
# Вам необходимо создать словарь, который будет включать в себя ключи от 1 до n,
# а значениями соответствующего ключа будет значение ключа в квадрате.
# В качестве ответа выведите полученный словарь
n = int(input())
d = {}
for i in range(1, n + 1):
    d[i] = i * i
print(d)

# Напишите программу, которая печатает словарь alphabet, где ключи  - строчные английские символы,
# а значения - порядковые номера букв в алфавите.
# Начало вашего словаря должны быть таким {"a": 1, "b": 2 }
# В качестве ответа распечатайте ключи и значения данного словаря по алфавиту, каждую пару на новой строчке.
# Весь английский алфавит можно взять в переменной ascii_lowercase из модуля string:
# from string import ascii_lowercase
# print(ascii_lowercase)
from string import ascii_lowercase
alphabet = {}
for i in range(len(ascii_lowercase)):
    alphabet[ascii_lowercase[i]] = i + 1

for k, v in alphabet.items():
    print(k, v)

# Есть два словаря, нужно их объединить в новый словарь rez и вывести его на экран
d1 = {'a': 100, 'b': 200, 'c': 333}
d2 = {'x': 300, 'y': 200, 'z': 777}
rez = dict()
rez.update(d1)
rez.update(d2)
print(rez)

# SET
# Дано N чисел, требуется выяснить, сколько среди них различных.
int(input())
s = set(input().split())
print(len(s))

# Количество совпадающих SET
# Даны два списка чисел, которые могут содержать до 100000 чисел каждый.
# Посчитайте, сколько чисел содержится одновременно как в первом списке, так и во втором.
# 1 8 3
# 4 8 3
#  >> 2
a = set(input().split())
b = set(input().split())
print(len(list(a) + list(b)) - len(set(list(a) + list(b))))

# більш компактний варіант розв'язку:
print(len(set(input().split()) & set(input().split())))

# Пересечение множеств
# Даны два списка чисел, которые могут содержать до 10000 чисел каждый.
# Выведите все ЧИСЛА, которые входят как в первый, так и во второй список в порядке возрастания.
# 1 3 2
# 4 3 2
#  >> 2 3
print(*sorted(set(int(i) for i in input().split()) & set(int(i) for i in input().split())))

# інший варіант розв'язку через MAP:
print(*sorted(map(int, set(input().split()) & set(input().split()))))
# інший варіант розв'язку через KEY:
print(*sorted(set(input().split()) & set(input().split()), key=int))

# Встречалось ли число раньше
# Во входной строке записана последовательность чисел через пробел.
# Для каждого числа выведите слово YES (в отдельной строке),
# если это число ранее встречалось в последовательности или NO, если не встречалось.
# 1 2 3 2 3 4
# NO
# NO
# NO
# YES
# YES
# NO
n = list(map(int, input().split()))
s = set(n)
for i in n:
    if i in s:
        print('NO')
        s.discard(i)
    else:
        print('YES')

# Структура set
# Напишите программу, которая будет выполнять последовательность запросов вида ADD num,
# PRESENT num и COUNT (без параметра). Программу обязательно следует писать с использованием шаблонного типа set.
# Выполнение каждого запроса вида ADD num должно добавлять элемент num во множество (если такой элемент уже есть,
# добавление ещё одной копии не изменяет множество), на экран при этом ничего не выводится.
# При выполнении каждого запроса вида PRESENT num должно выдаваться сообщение «YES» или «NO»
# (большими буквами, в отдельной строке), соответственно тому, есть ли такой элемент во множестве;
# значение множества при этом не изменяется.
# При выполнении каждого запроса вида COUNT должна выдаваться на экран в отдельной строке текущее
# количество различных элементов в множестве; значение множества при этом не изменяется.
# 7
# ADD 5
# ADD 7
# COUNT
# PRESENT 3
# PRESENT 5
# ADD 3
# COUNT
# Sample Output:
#  >> 2
#  >> NO
#  >> YES
#  >> 3
N = int(input())
s = [input().split() for i in range(N)]
t = set()
for i in s:
    if i[0] == 'ADD':
        t.add(i[1])
    elif i[0] == 'PRESENT':
        if i[1] in t:
            print('YES')
        else:
            print('NO')
    else:
        print(len(t))

# В этой задаче вам предстоит достать определенные данные из словаря data.
# Ваша задача получить значения ключа first_name у всех элементов и вывести их в алфавитном порядке,
# каждое имя с новой строки
data = \
{
    'my_friends':
    {
        'count': 10,
        'items':
        [
            {
                'first_name': 'Kurt',
                'id': 621547005,
                'last_name': 'Cobain',
                'bdate': '31.8.2005'
            },
            {
                'first_name': 'Виолетта',
                'id': 484200150,
                'last_name': 'Кастилио'
            },
            {
                'first_name': 'Иринка',
                'id': 21886133,
                'last_name': 'Бушуева',
                'bdate': '28.8.1942'
            },
            {
                'first_name': 'Данил',
                'id': 282456573,
                'last_name': 'Греков',
                'bdate': '4.7.2002'
            },
            {
                'first_name': 'Валентин',
                'id': 184902932,
                'last_name': 'Долматов',
                'bdate': '25.5'
            },
            {
                'first_name': 'Евгений',
                'id': 620469646,
                'last_name': 'Шапорин',
                'bdate': '6.12.1982'
            },
            {
                'first_name': 'Ангелина',
                'id': 622328862,
                'last_name': 'Краснова',
                'bdate': '4.11.1995'
            },
            {
                'first_name': 'Иван',
                'id': 576015198,
                'last_name': 'Вирин',
                'bdate': '2.2.1915'
            },
            {
                'first_name': 'Паша',
                'id': 386922406,
                'last_name': 'Воронов',
                'bdate': '27.9'
            },
            {
                'first_name': 'Ольга',
                'id': 622170942,
                'last_name': 'Савченкова',
                'bdate': '20.12'
            }
        ]
    }
}
s = []
for i in range(len(data['my_friends']['items'])):
    s.append(data['my_friends']['items'][i]['first_name'])
print(*sorted(s), sep='\n')

# Представьте, у нас есть список товаров и их стоимость, но мы хотим взглянуть на него в отсортированном виде.
# Вверху хотим видеть самые дорогие товары, внизу самые дешевые
# Программа будет принимать строки, в которых сперва указывается название товара,
# а затем через двоеточие с пробелом его цена - целое положительное число.
# Строка "конец" означает списка товаров и соответственно окончание ввода
# Все товары имеют уникальные названия, цены не дублируются.
# Ваша задача вывести список товаров по уменьшению цены
# Sony PlayStation 5: 46000
# Телевизор QLED Samsung QE65Q60TAU: 87090
# Смартфон Samsung Galaxy A11: 10000
# Планшет Samsung Galaxy Tab S6: 26600
# конец
# >> Телевизор QLED Samsung QE65Q60TAU
# >> Sony PlayStation 5
# >> Планшет Samsung Galaxy Tab S6
# >> Смартфон Samsung Galaxy A11
d={}
while True:
    s = input()
    if s == 'конец':
        break
    else:
        l = s.split(': ')
        d[l[0]] = int(l[1])
for k, v in sorted(d.items(), key=lambda x: x[1], reverse=True):
    print(k)

# РЕЙТИНГ ТАКСИСТОВ
# Руководитель таксопарка хочет увидеть отчет по всем таксистам, где нужно указать имя таксиста и его среднюю оценку.
# Информацию в отчете нужно расположить по убыванию средней оценки таксиста.
# После каждого успешно выполненного заказа, клиент выставляет таксисту оценку - целое число от 1 до 5.
# Программа будет принимать строки, в которых сперва указывается имя таксиста, а затем через запятую с
# пробелом его оценка за заказ.
# Строка "конец" является последней строкой и означает окончание ввода
# Нужно расположить таксистов в порядке убывания их средней оценке и вывести имя каждого таксиста и его
# среднюю оценку в отдельной строке. В случае совпадения средних оценок расположить таксистов нужно
# отсортировать имена таксистов по алфавиту
# Джек, 2
# Джек, 3
# Билл, 5
# Билл, 4
# Билл, 4
# Билл, 3
# конец
# >> Билл 4.0
# >> Джек 2.5
d = {}
for p in iter(input, 'конец'):
    name, score = p.split(', ')
    d[name] = d.get(name, []) + [int(score)]
for name, scores in d.items():
    d[name] = sum(scores) / len(scores)
print(*(f'{n} {s}' for n, s in sorted(d.items(), key=lambda x: (-x[1], x[0]))), sep='\n')

# ПРЕМИЯ ОСКАР
# Представьте, что мы с вами сами можем решать кому и сколько статуэток Оскара уйдет
# (Лео бы тогда давно купался в этих статуэтках)
# Ваша задача написать программу, которая находит информацию,
# кто из актеров получил наибольшее и наименьшее количество статуэток
# Программа принимать на вход в первой строке натуральное число n - количество вручаемых сегодня наград.
# И затем в n следующих строках вводятся имена актеров - победителей.
# Нужно вывести в  отдельных строках имена актеров набравших наибольшее и наименьшее количество статуэток
# и через запятую их количество. Гарантируется, что всегда будет только один человек,
# набравших наибольшее и наименьшее количество статуэток.
# 6
# Леонардо Ди Каприо
# Джонни Депп
# Леонардо Ди Каприо
# Леонардо Ди Каприо
# Джонни Депп
# Мэтт Деймон
# >> Леонардо Ди Каприо, 3
# >> Мэтт Деймон, 1
n = int(input())
s = [input() for i in range(n)]
d = {i:s.count(i) for i in s}
print(f'{max(d, key=d.get)}, {max(d.values())}')
print(f'{min(d, key=d.get)}, {min(d.values())}')

#











